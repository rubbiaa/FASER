/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_rave_WRAP_H_
#define SWIG_rave_WRAP_H_

class SwigDirector_RavePropagator : public rave::Propagator, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_RavePropagator(JNIEnv *jenv);
    virtual rave::Propagator *copy() const;
    virtual rave::Track closestTo(rave::Track const &orig, rave::Point3D const &arg1, bool transverse) const;
    virtual std::pair< rave::Track,double > to(rave::Track const &orig, ravesurf::Plane const &arg1) const;
    virtual std::pair< rave::Track,double > to(rave::Track const &orig, ravesurf::Cylinder const &arg1) const;
    virtual ~SwigDirector_RavePropagator();
public:
    bool swig_overrides(int n) {
      return (n < 4 ? swig_override[n] : false);
    }
protected:
    bool swig_override[4];
};

class SwigDirector_RaveVacuumPropagator : public rave::VacuumPropagator, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_RaveVacuumPropagator(JNIEnv *jenv);
    virtual rave::Propagator *copy() const;
    virtual rave::Track closestTo(rave::Track const &arg0, rave::Point3D const &arg1, bool transverse) const;
    virtual std::pair< rave::Track,double > to(rave::Track const &orig, ravesurf::Plane const &arg1) const;
    virtual std::pair< rave::Track,double > to(rave::Track const &orig, ravesurf::Cylinder const &arg1) const;
    virtual ~SwigDirector_RaveVacuumPropagator();
public:
    bool swig_overrides(int n) {
      return (n < 4 ? swig_override[n] : false);
    }
protected:
    bool swig_override[4];
};


#endif
