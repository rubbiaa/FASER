/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package at.hephy.Rave;

public class RavePropagator {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected RavePropagator(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(RavePropagator obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        raveJNI.delete_RavePropagator(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    raveJNI.RavePropagator_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    raveJNI.RavePropagator_change_ownership(this, swigCPtr, true);
  }

  public RavePropagator copy() {
    long cPtr = raveJNI.RavePropagator_copy(swigCPtr, this);
    return (cPtr == 0) ? null : new RavePropagator(cPtr, false);
  }

  public RaveTrack closestTo(RaveTrack orig, RavePoint3D arg1, boolean transverse) {
    return new RaveTrack(raveJNI.RavePropagator_closestTo(swigCPtr, this, RaveTrack.getCPtr(orig), orig, RavePoint3D.getCPtr(arg1), arg1, transverse), true);
  }

  public SWIGTYPE_p_std__pairT_rave__Track_double_t to(RaveTrack orig, RavePlane arg1) {
    return new SWIGTYPE_p_std__pairT_rave__Track_double_t(raveJNI.RavePropagator_to__SWIG_0(swigCPtr, this, RaveTrack.getCPtr(orig), orig, RavePlane.getCPtr(arg1), arg1), true);
  }

  public SWIGTYPE_p_std__pairT_rave__Track_double_t to(RaveTrack orig, RaveCylinder arg1) {
    return new SWIGTYPE_p_std__pairT_rave__Track_double_t(raveJNI.RavePropagator_to__SWIG_1(swigCPtr, this, RaveTrack.getCPtr(orig), orig, RaveCylinder.getCPtr(arg1), arg1), true);
  }

  public RavePropagator() {
    this(raveJNI.new_RavePropagator(), true);
    raveJNI.RavePropagator_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

}
