/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for 
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
      jenv->DeleteLocalRef(jobj);
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };
}

#endif /* __cplusplus */


namespace Swig {
  namespace {
    jclass jclass_raveJNI = NULL;
    jmethodID director_methids[8];
  }
}

#include <sstream>


#include <rave/Track.h>
#include <rave/Vertex.h>
#include <rave/Vector3D.h>
#include <rave/Vector6D.h>
#include <rave/VertexFactory.h>
#include <rave/VacuumPropagator.h>
#include <rave/Plane.h>
#include <rave/Cylinder.h>
#include <rave/ConstantMagneticField.h>
#include <rave/Version.h>
#include <rave/Units.h>
#include <rave/Logger.h>
#include <rave/Exception.h>

#ifdef WITH_FLAVORTAGGING
#include <rave/FlavorTagFactory.h>
#endif

#ifdef WITH_KINEMATICS
#include <rave/Vector4D.h>
#include <rave/Vector7D.h>
#include <rave/Covariance4D.h>
#include <rave/Covariance7D.h>
#include <rave/PerigeeParameters6D.h>
#include <rave/PerigeeCovariance6D.h>
#include <rave/KinematicParticle.h>
#include <rave/TransientTrackKinematicParticle.h>
#include <rave/VirtualKinematicParticle.h>
#include <rave/KinematicVertex.h>
#include <rave/BasicKinematicConstraint.h>
#include <rave/KinematicConstraint.h>
#include <rave/MultipleKinematicConstraint.h>
#include <rave/KinematicConstraintBuilder.h>
#include <rave/KinematicTree.h>
#include <rave/KinematicTreeFactory.h>
#endif

#include "RaveBase/Converters/interface/RaveStreamers.h"



#include <string>


#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#include <utility>


#include <vector>
#include <stdexcept>

SWIGINTERN std::vector< rave::Track >::const_reference std_vector_Sl_rave_Track_Sg__get(std::vector< rave::Track > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_rave_Track_Sg__set(std::vector< rave::Track > *self,int i,std::vector< rave::Track >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::pair< float,rave::Track > >::const_reference std_vector_Sl_std_pair_Sl_float_Sc_rave_Track_Sg__Sg__get(std::vector< std::pair< float,rave::Track > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_pair_Sl_float_Sc_rave_Track_Sg__Sg__set(std::vector< std::pair< float,rave::Track > > *self,int i,std::vector< std::pair< float,rave::Track > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< rave::Vertex >::const_reference std_vector_Sl_rave_Vertex_Sg__get(std::vector< rave::Vertex > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_rave_Vertex_Sg__set(std::vector< rave::Vertex > *self,int i,std::vector< rave::Vertex >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< rave::KinematicParticle >::const_reference std_vector_Sl_rave_KinematicParticle_Sg__get(std::vector< rave::KinematicParticle > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_rave_KinematicParticle_Sg__set(std::vector< rave::KinematicParticle > *self,int i,std::vector< rave::KinematicParticle >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< rave::KinematicTree >::const_reference std_vector_Sl_rave_KinematicTree_Sg__get(std::vector< rave::KinematicTree > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_rave_KinematicTree_Sg__set(std::vector< rave::KinematicTree > *self,int i,std::vector< rave::KinematicTree >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN char const *rave_Point3D_toString(rave::Point3D *self){
        std::ostringstream os;
        os << (*self);
        return os.str().c_str();
    }
SWIGINTERN std::string rave_Point3D___str__(rave::Point3D *self){
        std::ostringstream os;
        os << (*self);
        return os.str();
    }
SWIGINTERN char const *rave_Vector6D_toString(rave::Vector6D *self){
        std::ostringstream os;
        os << (*self);
        return os.str().c_str();
    }
SWIGINTERN std::string rave_Vector6D___str__(rave::Vector6D *self){
        std::ostringstream os;
        os << (*self);
        return os.str();
    }
SWIGINTERN char const *rave_Covariance3D_toString(rave::Covariance3D *self){
        std::ostringstream os;
        os << (*self);
        return os.str().c_str();
    }
SWIGINTERN std::string rave_Covariance3D___str__(rave::Covariance3D *self){
        std::ostringstream os;
        os << (*self);
        return os.str();
    }
SWIGINTERN char const *rave_Covariance33D_toString(rave::Covariance33D *self){
        std::ostringstream os;
        os << (*self);
        return os.str().c_str();
    }
SWIGINTERN std::string rave_Covariance33D___str__(rave::Covariance33D *self){
        std::ostringstream os;
        os << (*self);
        return os.str();
    }
SWIGINTERN char const *rave_Covariance6D_toString(rave::Covariance6D *self){
        std::ostringstream os;
        os << (*self);
        return os.str().c_str();
    }
SWIGINTERN std::string rave_Covariance6D___str__(rave::Covariance6D *self){
        std::ostringstream os;
        os << (*self);
        return os.str();
    }
SWIGINTERN char const *rave_Track_toString(rave::Track *self){
        std::ostringstream os;
        os << (*self);
        return os.str().c_str();
    }
SWIGINTERN std::string rave_Track___str__(rave::Track *self){
        std::ostringstream os;
        os << (*self);
        return os.str();
    }
SWIGINTERN char const *rave_Vertex_toString(rave::Vertex *self){
        std::ostringstream os;
        os << (*self);
        return os.str().c_str();
    }
SWIGINTERN std::string rave_Vertex___str__(rave::Vertex *self){
        std::ostringstream os;
        os << (*self);
        return os.str();
    }

typedef rave::Point3D RaveVector3D;

SWIGINTERN char const *rave_Vector4D_toString(rave::Vector4D *self){
        std::ostringstream os;
        os << (*self);
        return os.str().c_str();
    }
SWIGINTERN std::string rave_Vector4D___str__(rave::Vector4D *self){
        std::ostringstream os;
        os << (*self);
        return os.str();
    }
SWIGINTERN char const *rave_Vector7D_toString(rave::Vector7D *self){
        std::ostringstream os;
        os << (*self);
        return os.str().c_str();
    }
SWIGINTERN std::string rave_Vector7D___str__(rave::Vector7D *self){
        std::ostringstream os;
        os << (*self);
        return os.str();
    }
SWIGINTERN char const *rave_Covariance7D_toString(rave::Covariance7D *self){
        std::ostringstream os;
        os << (*self);
        return os.str().c_str();
    }
SWIGINTERN std::string rave_Covariance7D___str__(rave::Covariance7D *self){
        std::ostringstream os;
        os << (*self);
        return os.str();
    }
SWIGINTERN char const *rave_PerigeeParameters6D_toString(rave::PerigeeParameters6D *self){
        std::ostringstream os;
        os << (*self);
        return os.str().c_str();
    }
SWIGINTERN std::string rave_PerigeeParameters6D___str__(rave::PerigeeParameters6D *self){
        std::ostringstream os;
        os << (*self);
        return os.str();
    }
SWIGINTERN char const *rave_PerigeeCovariance6D_toString(rave::PerigeeCovariance6D *self){
        std::ostringstream os;
        os << (*self);
        return os.str().c_str();
    }
SWIGINTERN std::string rave_PerigeeCovariance6D___str__(rave::PerigeeCovariance6D *self){
        std::ostringstream os;
        os << (*self);
        return os.str();
    }
SWIGINTERN char const *rave_KinematicParticle_toString(rave::KinematicParticle *self){
        std::ostringstream os;
        os << (*self);
        return os.str().c_str();
    }
SWIGINTERN std::string rave_KinematicParticle___str__(rave::KinematicParticle *self){
        std::ostringstream os;
        os << (*self);
        return os.str();
    }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "rave.h"

SwigDirector_RavePropagator::SwigDirector_RavePropagator(JNIEnv *jenv) : rave::Propagator(), Swig::Director(jenv) {
}

rave::Propagator *SwigDirector_RavePropagator::copy() const {
  rave::Propagator *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method rave::Propagator::copy.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_raveJNI, Swig::director_methids[0], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = *(rave::Propagator **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

rave::Track SwigDirector_RavePropagator::closestTo(rave::Track const &orig, rave::Point3D const &arg1, bool transverse) const {
  rave::Track c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jorig = 0 ;
  jlong jarg1 = 0 ;
  jboolean jtransverse  ;
  rave::Track *argp ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method rave::Propagator::closestTo.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(rave::Track **)&jorig = (rave::Track *) &orig; 
    *(rave::Point3D **)&jarg1 = (rave::Point3D *) &arg1; 
    jtransverse = (jboolean) transverse;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_raveJNI, Swig::director_methids[1], swigjobj, jorig, jarg1, jtransverse);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    argp = *(rave::Track **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type rave::Track");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::pair< rave::Track,double > SwigDirector_RavePropagator::to(rave::Track const &orig, ravesurf::Plane const &arg1) const {
  SwigValueWrapper< std::pair< rave::Track,double > > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jorig = 0 ;
  jlong jarg1 = 0 ;
  std::pair< rave::Track,double > *argp ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method rave::Propagator::to.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(rave::Track **)&jorig = (rave::Track *) &orig; 
    *(ravesurf::Plane **)&jarg1 = (ravesurf::Plane *) &arg1; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_raveJNI, Swig::director_methids[2], swigjobj, jorig, jarg1);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    argp = *(std::pair< rave::Track,double > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::pair< rave::Track,double >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::pair< rave::Track,double > SwigDirector_RavePropagator::to(rave::Track const &orig, ravesurf::Cylinder const &arg1) const {
  SwigValueWrapper< std::pair< rave::Track,double > > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jorig = 0 ;
  jlong jarg1 = 0 ;
  std::pair< rave::Track,double > *argp ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method rave::Propagator::to.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(rave::Track **)&jorig = (rave::Track *) &orig; 
    *(ravesurf::Cylinder **)&jarg1 = (ravesurf::Cylinder *) &arg1; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_raveJNI, Swig::director_methids[3], swigjobj, jorig, jarg1);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    argp = *(std::pair< rave::Track,double > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::pair< rave::Track,double >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

SwigDirector_RavePropagator::~SwigDirector_RavePropagator() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_RavePropagator::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "copy", "()Lat/hephy/Rave/RavePropagator;", NULL 
    },
    {
      "closestTo", "(Lat/hephy/Rave/RaveTrack;Lat/hephy/Rave/RavePoint3D;Z)Lat/hephy/Rave/RaveTrack;", NULL 
    },
    {
      "to", "(Lat/hephy/Rave/RaveTrack;Lat/hephy/Rave/RavePlane;)Lat/hephy/Rave/SWIGTYPE_p_std__pairT_rave__Track_double_t;", NULL 
    },
    {
      "to", "(Lat/hephy/Rave/RaveTrack;Lat/hephy/Rave/RaveCylinder;)Lat/hephy/Rave/SWIGTYPE_p_std__pairT_rave__Track_double_t;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("at/hephy/Rave/RavePropagator");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_RaveVacuumPropagator::SwigDirector_RaveVacuumPropagator(JNIEnv *jenv) : rave::VacuumPropagator(), Swig::Director(jenv) {
}

rave::Propagator *SwigDirector_RaveVacuumPropagator::copy() const {
  rave::Propagator *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return rave::VacuumPropagator::copy();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_raveJNI, Swig::director_methids[4], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = *(rave::Propagator **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

rave::Track SwigDirector_RaveVacuumPropagator::closestTo(rave::Track const &arg0, rave::Point3D const &arg1, bool transverse) const {
  rave::Track c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0 = 0 ;
  jlong jarg1 = 0 ;
  jboolean jtransverse  ;
  rave::Track *argp ;
  
  if (!swig_override[1]) {
    return rave::VacuumPropagator::closestTo(arg0,arg1,transverse);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(rave::Track **)&jarg0 = (rave::Track *) &arg0; 
    *(rave::Point3D **)&jarg1 = (rave::Point3D *) &arg1; 
    jtransverse = (jboolean) transverse;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_raveJNI, Swig::director_methids[5], swigjobj, jarg0, jarg1, jtransverse);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    argp = *(rave::Track **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type rave::Track");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::pair< rave::Track,double > SwigDirector_RaveVacuumPropagator::to(rave::Track const &orig, ravesurf::Plane const &arg1) const {
  SwigValueWrapper< std::pair< rave::Track,double > > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jorig = 0 ;
  jlong jarg1 = 0 ;
  std::pair< rave::Track,double > *argp ;
  
  if (!swig_override[2]) {
    return rave::VacuumPropagator::to(orig,arg1);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(rave::Track **)&jorig = (rave::Track *) &orig; 
    *(ravesurf::Plane **)&jarg1 = (ravesurf::Plane *) &arg1; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_raveJNI, Swig::director_methids[6], swigjobj, jorig, jarg1);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    argp = *(std::pair< rave::Track,double > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::pair< rave::Track,double >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::pair< rave::Track,double > SwigDirector_RaveVacuumPropagator::to(rave::Track const &orig, ravesurf::Cylinder const &arg1) const {
  SwigValueWrapper< std::pair< rave::Track,double > > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jorig = 0 ;
  jlong jarg1 = 0 ;
  std::pair< rave::Track,double > *argp ;
  
  if (!swig_override[3]) {
    return rave::VacuumPropagator::to(orig,arg1);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(rave::Track **)&jorig = (rave::Track *) &orig; 
    *(ravesurf::Cylinder **)&jarg1 = (ravesurf::Cylinder *) &arg1; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_raveJNI, Swig::director_methids[7], swigjobj, jorig, jarg1);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    argp = *(std::pair< rave::Track,double > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::pair< rave::Track,double >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

SwigDirector_RaveVacuumPropagator::~SwigDirector_RaveVacuumPropagator() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_RaveVacuumPropagator::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "copy", "()Lat/hephy/Rave/RavePropagator;", NULL 
    },
    {
      "closestTo", "(Lat/hephy/Rave/RaveTrack;Lat/hephy/Rave/RavePoint3D;Z)Lat/hephy/Rave/RaveTrack;", NULL 
    },
    {
      "to", "(Lat/hephy/Rave/RaveTrack;Lat/hephy/Rave/RavePlane;)Lat/hephy/Rave/SWIGTYPE_p_std__pairT_rave__Track_double_t;", NULL 
    },
    {
      "to", "(Lat/hephy/Rave/RaveTrack;Lat/hephy/Rave/RaveCylinder;)Lat/hephy/Rave/SWIGTYPE_p_std__pairT_rave__Track_double_t;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("at/hephy/Rave/RaveVacuumPropagator");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveTrackContainer_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< rave::Track > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< rave::Track > *)new std::vector< rave::Track >();
  *(std::vector< rave::Track > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveTrackContainer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< rave::Track >::size_type arg1 ;
  std::vector< rave::Track > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< rave::Track >::size_type)jarg1; 
  result = (std::vector< rave::Track > *)new std::vector< rave::Track >(arg1);
  *(std::vector< rave::Track > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveTrackContainer_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< rave::Track > *arg1 = (std::vector< rave::Track > *) 0 ;
  std::vector< rave::Track >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< rave::Track > **)&jarg1; 
  result = ((std::vector< rave::Track > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveTrackContainer_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< rave::Track > *arg1 = (std::vector< rave::Track > *) 0 ;
  std::vector< rave::Track >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< rave::Track > **)&jarg1; 
  result = ((std::vector< rave::Track > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveTrackContainer_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< rave::Track > *arg1 = (std::vector< rave::Track > *) 0 ;
  std::vector< rave::Track >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< rave::Track > **)&jarg1; 
  arg2 = (std::vector< rave::Track >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveTrackContainer_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< rave::Track > *arg1 = (std::vector< rave::Track > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< rave::Track > **)&jarg1; 
  result = (bool)((std::vector< rave::Track > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveTrackContainer_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< rave::Track > *arg1 = (std::vector< rave::Track > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< rave::Track > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveTrackContainer_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< rave::Track > *arg1 = (std::vector< rave::Track > *) 0 ;
  std::vector< rave::Track >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< rave::Track > **)&jarg1; 
  arg2 = *(std::vector< rave::Track >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< rave::Track >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveTrackContainer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< rave::Track > *arg1 = (std::vector< rave::Track > *) 0 ;
  int arg2 ;
  std::vector< rave::Track >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< rave::Track > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< rave::Track >::value_type *) &std_vector_Sl_rave_Track_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< rave::Track >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveTrackContainer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< rave::Track > *arg1 = (std::vector< rave::Track > *) 0 ;
  int arg2 ;
  std::vector< rave::Track >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< rave::Track > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< rave::Track >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_rave_Track_Sg__set(arg1,arg2,(rave::Track const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RaveTrackContainer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< rave::Track > *arg1 = (std::vector< rave::Track > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< rave::Track > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1WeightedRaveTrack_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< float,rave::Track > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::pair< float,rave::Track > *)new std::pair< float,rave::Track >();
  *(std::pair< float,rave::Track > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1WeightedRaveTrack_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  float arg1 ;
  rave::Track arg2 ;
  rave::Track *argp2 ;
  std::pair< float,rave::Track > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (float)jarg1; 
  argp2 = *(rave::Track **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null rave::Track");
    return 0;
  }
  arg2 = *argp2; 
  result = (std::pair< float,rave::Track > *)new std::pair< float,rave::Track >(arg1,arg2);
  *(std::pair< float,rave::Track > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1WeightedRaveTrack_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< float,rave::Track > *arg1 = 0 ;
  std::pair< float,rave::Track > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< float,rave::Track > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< float,rave::Track > const & reference is null");
    return 0;
  } 
  result = (std::pair< float,rave::Track > *)new std::pair< float,rave::Track >((std::pair< float,rave::Track > const &)*arg1);
  *(std::pair< float,rave::Track > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_WeightedRaveTrack_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  std::pair< float,rave::Track > *arg1 = (std::pair< float,rave::Track > *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< float,rave::Track > **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_WeightedRaveTrack_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  std::pair< float,rave::Track > *arg1 = (std::pair< float,rave::Track > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< float,rave::Track > **)&jarg1; 
  result = (float) ((arg1)->first);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_WeightedRaveTrack_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< float,rave::Track > *arg1 = (std::pair< float,rave::Track > *) 0 ;
  rave::Track *arg2 = (rave::Track *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< float,rave::Track > **)&jarg1; 
  arg2 = *(rave::Track **)&jarg2; 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_WeightedRaveTrack_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< float,rave::Track > *arg1 = (std::pair< float,rave::Track > *) 0 ;
  rave::Track *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< float,rave::Track > **)&jarg1; 
  result = (rave::Track *)& ((arg1)->second);
  *(rave::Track **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1WeightedRaveTrack(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< float,rave::Track > *arg1 = (std::pair< float,rave::Track > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< float,rave::Track > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1WeightedRaveTrackContainer_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::pair< float,rave::Track > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::pair< float,rave::Track > > *)new std::vector< std::pair< float,rave::Track > >();
  *(std::vector< std::pair< float,rave::Track > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1WeightedRaveTrackContainer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::pair< float,rave::Track > >::size_type arg1 ;
  std::vector< std::pair< float,rave::Track > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::pair< float,rave::Track > >::size_type)jarg1; 
  result = (std::vector< std::pair< float,rave::Track > > *)new std::vector< std::pair< float,rave::Track > >(arg1);
  *(std::vector< std::pair< float,rave::Track > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_WeightedRaveTrackContainer_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< float,rave::Track > > *arg1 = (std::vector< std::pair< float,rave::Track > > *) 0 ;
  std::vector< std::pair< float,rave::Track > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< float,rave::Track > > **)&jarg1; 
  result = ((std::vector< std::pair< float,rave::Track > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_WeightedRaveTrackContainer_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< float,rave::Track > > *arg1 = (std::vector< std::pair< float,rave::Track > > *) 0 ;
  std::vector< std::pair< float,rave::Track > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< float,rave::Track > > **)&jarg1; 
  result = ((std::vector< std::pair< float,rave::Track > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_WeightedRaveTrackContainer_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::pair< float,rave::Track > > *arg1 = (std::vector< std::pair< float,rave::Track > > *) 0 ;
  std::vector< std::pair< float,rave::Track > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< float,rave::Track > > **)&jarg1; 
  arg2 = (std::vector< std::pair< float,rave::Track > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_WeightedRaveTrackContainer_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::pair< float,rave::Track > > *arg1 = (std::vector< std::pair< float,rave::Track > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< float,rave::Track > > **)&jarg1; 
  result = (bool)((std::vector< std::pair< float,rave::Track > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_WeightedRaveTrackContainer_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::pair< float,rave::Track > > *arg1 = (std::vector< std::pair< float,rave::Track > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< float,rave::Track > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_WeightedRaveTrackContainer_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::pair< float,rave::Track > > *arg1 = (std::vector< std::pair< float,rave::Track > > *) 0 ;
  std::vector< std::pair< float,rave::Track > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::pair< float,rave::Track > > **)&jarg1; 
  arg2 = *(std::vector< std::pair< float,rave::Track > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< float,rave::Track > >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< std::pair< float,rave::Track > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_WeightedRaveTrackContainer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::pair< float,rave::Track > > *arg1 = (std::vector< std::pair< float,rave::Track > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< float,rave::Track > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< float,rave::Track > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::pair< float,rave::Track > >::value_type *) &std_vector_Sl_std_pair_Sl_float_Sc_rave_Track_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::pair< float,rave::Track > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_WeightedRaveTrackContainer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::pair< float,rave::Track > > *arg1 = (std::vector< std::pair< float,rave::Track > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< float,rave::Track > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::pair< float,rave::Track > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::pair< float,rave::Track > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< float,rave::Track > >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_std_pair_Sl_float_Sc_rave_Track_Sg__Sg__set(arg1,arg2,(std::pair< float,rave::Track > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1WeightedRaveTrackContainer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::pair< float,rave::Track > > *arg1 = (std::vector< std::pair< float,rave::Track > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::pair< float,rave::Track > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveVertexContainer_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< rave::Vertex > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< rave::Vertex > *)new std::vector< rave::Vertex >();
  *(std::vector< rave::Vertex > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveVertexContainer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< rave::Vertex >::size_type arg1 ;
  std::vector< rave::Vertex > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< rave::Vertex >::size_type)jarg1; 
  result = (std::vector< rave::Vertex > *)new std::vector< rave::Vertex >(arg1);
  *(std::vector< rave::Vertex > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexContainer_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< rave::Vertex > *arg1 = (std::vector< rave::Vertex > *) 0 ;
  std::vector< rave::Vertex >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< rave::Vertex > **)&jarg1; 
  result = ((std::vector< rave::Vertex > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexContainer_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< rave::Vertex > *arg1 = (std::vector< rave::Vertex > *) 0 ;
  std::vector< rave::Vertex >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< rave::Vertex > **)&jarg1; 
  result = ((std::vector< rave::Vertex > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexContainer_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< rave::Vertex > *arg1 = (std::vector< rave::Vertex > *) 0 ;
  std::vector< rave::Vertex >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< rave::Vertex > **)&jarg1; 
  arg2 = (std::vector< rave::Vertex >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexContainer_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< rave::Vertex > *arg1 = (std::vector< rave::Vertex > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< rave::Vertex > **)&jarg1; 
  result = (bool)((std::vector< rave::Vertex > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexContainer_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< rave::Vertex > *arg1 = (std::vector< rave::Vertex > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< rave::Vertex > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexContainer_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< rave::Vertex > *arg1 = (std::vector< rave::Vertex > *) 0 ;
  std::vector< rave::Vertex >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< rave::Vertex > **)&jarg1; 
  arg2 = *(std::vector< rave::Vertex >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Vertex >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< rave::Vertex >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexContainer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< rave::Vertex > *arg1 = (std::vector< rave::Vertex > *) 0 ;
  int arg2 ;
  std::vector< rave::Vertex >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< rave::Vertex > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< rave::Vertex >::value_type *) &std_vector_Sl_rave_Vertex_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< rave::Vertex >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexContainer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< rave::Vertex > *arg1 = (std::vector< rave::Vertex > *) 0 ;
  int arg2 ;
  std::vector< rave::Vertex >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< rave::Vertex > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< rave::Vertex >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Vertex >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_rave_Vertex_Sg__set(arg1,arg2,(rave::Vertex const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RaveVertexContainer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< rave::Vertex > *arg1 = (std::vector< rave::Vertex > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< rave::Vertex > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKParticleContainer_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< rave::KinematicParticle > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< rave::KinematicParticle > *)new std::vector< rave::KinematicParticle >();
  *(std::vector< rave::KinematicParticle > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKParticleContainer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< rave::KinematicParticle >::size_type arg1 ;
  std::vector< rave::KinematicParticle > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< rave::KinematicParticle >::size_type)jarg1; 
  result = (std::vector< rave::KinematicParticle > *)new std::vector< rave::KinematicParticle >(arg1);
  *(std::vector< rave::KinematicParticle > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKParticleContainer_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< rave::KinematicParticle > *arg1 = (std::vector< rave::KinematicParticle > *) 0 ;
  std::vector< rave::KinematicParticle >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< rave::KinematicParticle > **)&jarg1; 
  result = ((std::vector< rave::KinematicParticle > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKParticleContainer_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< rave::KinematicParticle > *arg1 = (std::vector< rave::KinematicParticle > *) 0 ;
  std::vector< rave::KinematicParticle >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< rave::KinematicParticle > **)&jarg1; 
  result = ((std::vector< rave::KinematicParticle > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveKParticleContainer_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< rave::KinematicParticle > *arg1 = (std::vector< rave::KinematicParticle > *) 0 ;
  std::vector< rave::KinematicParticle >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< rave::KinematicParticle > **)&jarg1; 
  arg2 = (std::vector< rave::KinematicParticle >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveKParticleContainer_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< rave::KinematicParticle > *arg1 = (std::vector< rave::KinematicParticle > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< rave::KinematicParticle > **)&jarg1; 
  result = (bool)((std::vector< rave::KinematicParticle > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveKParticleContainer_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< rave::KinematicParticle > *arg1 = (std::vector< rave::KinematicParticle > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< rave::KinematicParticle > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveKParticleContainer_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< rave::KinematicParticle > *arg1 = (std::vector< rave::KinematicParticle > *) 0 ;
  std::vector< rave::KinematicParticle >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< rave::KinematicParticle > **)&jarg1; 
  arg2 = *(std::vector< rave::KinematicParticle >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::KinematicParticle >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< rave::KinematicParticle >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKParticleContainer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< rave::KinematicParticle > *arg1 = (std::vector< rave::KinematicParticle > *) 0 ;
  int arg2 ;
  std::vector< rave::KinematicParticle >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< rave::KinematicParticle > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< rave::KinematicParticle >::value_type *) &std_vector_Sl_rave_KinematicParticle_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< rave::KinematicParticle >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveKParticleContainer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< rave::KinematicParticle > *arg1 = (std::vector< rave::KinematicParticle > *) 0 ;
  int arg2 ;
  std::vector< rave::KinematicParticle >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< rave::KinematicParticle > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< rave::KinematicParticle >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::KinematicParticle >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_rave_KinematicParticle_Sg__set(arg1,arg2,(rave::KinematicParticle const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RaveKParticleContainer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< rave::KinematicParticle > *arg1 = (std::vector< rave::KinematicParticle > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< rave::KinematicParticle > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKTreeContainer_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< rave::KinematicTree > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< rave::KinematicTree > *)new std::vector< rave::KinematicTree >();
  *(std::vector< rave::KinematicTree > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKTreeContainer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< rave::KinematicTree >::size_type arg1 ;
  std::vector< rave::KinematicTree > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< rave::KinematicTree >::size_type)jarg1; 
  result = (std::vector< rave::KinematicTree > *)new std::vector< rave::KinematicTree >(arg1);
  *(std::vector< rave::KinematicTree > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKTreeContainer_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< rave::KinematicTree > *arg1 = (std::vector< rave::KinematicTree > *) 0 ;
  std::vector< rave::KinematicTree >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< rave::KinematicTree > **)&jarg1; 
  result = ((std::vector< rave::KinematicTree > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKTreeContainer_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< rave::KinematicTree > *arg1 = (std::vector< rave::KinematicTree > *) 0 ;
  std::vector< rave::KinematicTree >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< rave::KinematicTree > **)&jarg1; 
  result = ((std::vector< rave::KinematicTree > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveKTreeContainer_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< rave::KinematicTree > *arg1 = (std::vector< rave::KinematicTree > *) 0 ;
  std::vector< rave::KinematicTree >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< rave::KinematicTree > **)&jarg1; 
  arg2 = (std::vector< rave::KinematicTree >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveKTreeContainer_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< rave::KinematicTree > *arg1 = (std::vector< rave::KinematicTree > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< rave::KinematicTree > **)&jarg1; 
  result = (bool)((std::vector< rave::KinematicTree > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveKTreeContainer_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< rave::KinematicTree > *arg1 = (std::vector< rave::KinematicTree > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< rave::KinematicTree > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveKTreeContainer_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< rave::KinematicTree > *arg1 = (std::vector< rave::KinematicTree > *) 0 ;
  std::vector< rave::KinematicTree >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< rave::KinematicTree > **)&jarg1; 
  arg2 = *(std::vector< rave::KinematicTree >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::KinematicTree >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< rave::KinematicTree >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKTreeContainer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< rave::KinematicTree > *arg1 = (std::vector< rave::KinematicTree > *) 0 ;
  int arg2 ;
  std::vector< rave::KinematicTree >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< rave::KinematicTree > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< rave::KinematicTree >::value_type *) &std_vector_Sl_rave_KinematicTree_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< rave::KinematicTree >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveKTreeContainer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< rave::KinematicTree > *arg1 = (std::vector< rave::KinematicTree > *) 0 ;
  int arg2 ;
  std::vector< rave::KinematicTree >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< rave::KinematicTree > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< rave::KinematicTree >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::KinematicTree >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_rave_KinematicTree_Sg__set(arg1,arg2,(rave::KinematicTree const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RaveKTreeContainer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< rave::KinematicTree > *arg1 = (std::vector< rave::KinematicTree > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< rave::KinematicTree > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RavePoint3D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  rave::Point3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (rave::Point3D *)new rave::Point3D(arg1,arg2,arg3);
  *(rave::Point3D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RavePoint3D_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rave::Point3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rave::Point3D *)new rave::Point3D();
  *(rave::Point3D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePoint3D_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Point3D *arg1 = (rave::Point3D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Point3D **)&jarg1; 
  result = (float)((rave::Point3D const *)arg1)->x();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePoint3D_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Point3D *arg1 = (rave::Point3D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Point3D **)&jarg1; 
  result = (float)((rave::Point3D const *)arg1)->y();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePoint3D_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Point3D *arg1 = (rave::Point3D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Point3D **)&jarg1; 
  result = (float)((rave::Point3D const *)arg1)->z();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePoint3D_1mag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Point3D *arg1 = (rave::Point3D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Point3D **)&jarg1; 
  result = (float)((rave::Point3D const *)arg1)->mag();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePoint3D_1mag2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Point3D *arg1 = (rave::Point3D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Point3D **)&jarg1; 
  result = (float)((rave::Point3D const *)arg1)->mag2();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePoint3D_1perp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Point3D *arg1 = (rave::Point3D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Point3D **)&jarg1; 
  result = (float)((rave::Point3D const *)arg1)->perp();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePoint3D_1perp2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Point3D *arg1 = (rave::Point3D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Point3D **)&jarg1; 
  result = (float)((rave::Point3D const *)arg1)->perp2();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RavePoint3D_1equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  rave::Point3D *arg1 = (rave::Point3D *) 0 ;
  rave::Point3D *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Point3D **)&jarg1; 
  arg2 = *(rave::Point3D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return 0;
  } 
  result = (bool)((rave::Point3D const *)arg1)->equal((rave::Point3D const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RavePoint3D_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  rave::Point3D *arg1 = (rave::Point3D *) 0 ;
  rave::Point3D *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Point3D **)&jarg1; 
  arg2 = *(rave::Point3D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return ;
  } 
  (arg1)->add((rave::Point3D const &)*arg2);
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RavePoint3D_1subtract(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  rave::Point3D *arg1 = (rave::Point3D *) 0 ;
  rave::Point3D *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Point3D **)&jarg1; 
  arg2 = *(rave::Point3D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return ;
  } 
  (arg1)->subtract((rave::Point3D const &)*arg2);
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RavePoint3D_1multiply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  rave::Point3D *arg1 = (rave::Point3D *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Point3D **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->multiply(arg2);
}


SWIGEXPORT jstring JNICALL Java_at_hephy_Rave_raveJNI_RavePoint3D_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  rave::Point3D *arg1 = (rave::Point3D *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Point3D **)&jarg1; 
  result = (char *)rave_Point3D_toString(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_at_hephy_Rave_raveJNI_RavePoint3D_1_1_1str_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  rave::Point3D *arg1 = (rave::Point3D *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Point3D **)&jarg1; 
  result = rave_Point3D___str__(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RavePoint3D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::Point3D *arg1 = (rave::Point3D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::Point3D **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveEquals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  rave::Point3D *arg1 = 0 ;
  rave::Point3D *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Point3D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Point3D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return 0;
  } 
  result = (bool)rave::operator ==((rave::Point3D const &)*arg1,(rave::Point3D const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveVector6D_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rave::Vector6D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rave::Vector6D *)new rave::Vector6D();
  *(rave::Vector6D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveVector6D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  rave::Vector6D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (rave::Vector6D *)new rave::Vector6D(arg1,arg2,arg3,arg4,arg5,arg6);
  *(rave::Vector6D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveVector6D_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  rave::Point3D *arg1 = 0 ;
  rave::Vector3D *arg2 = 0 ;
  rave::Vector6D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Point3D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Vector3D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector3D const & reference is null");
    return 0;
  } 
  result = (rave::Vector6D *)new rave::Vector6D((rave::Point3D const &)*arg1,(rave::Vector3D const &)*arg2);
  *(rave::Vector6D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RaveVector6D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::Vector6D *arg1 = (rave::Vector6D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::Vector6D **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveVector6D_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Vector6D *arg1 = (rave::Vector6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vector6D **)&jarg1; 
  result = (float)((rave::Vector6D const *)arg1)->x();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveVector6D_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Vector6D *arg1 = (rave::Vector6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vector6D **)&jarg1; 
  result = (float)((rave::Vector6D const *)arg1)->y();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveVector6D_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Vector6D *arg1 = (rave::Vector6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vector6D **)&jarg1; 
  result = (float)((rave::Vector6D const *)arg1)->z();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveVector6D_1px(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Vector6D *arg1 = (rave::Vector6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vector6D **)&jarg1; 
  result = (float)((rave::Vector6D const *)arg1)->px();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveVector6D_1py(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Vector6D *arg1 = (rave::Vector6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vector6D **)&jarg1; 
  result = (float)((rave::Vector6D const *)arg1)->py();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveVector6D_1pz(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Vector6D *arg1 = (rave::Vector6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vector6D **)&jarg1; 
  result = (float)((rave::Vector6D const *)arg1)->pz();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVector6D_1momentum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::Vector6D *arg1 = (rave::Vector6D *) 0 ;
  rave::Vector3D result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vector6D **)&jarg1; 
  result = ((rave::Vector6D const *)arg1)->momentum();
  *(rave::Vector3D **)&jresult = new rave::Vector3D((const rave::Vector3D &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVector6D_1position(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::Vector6D *arg1 = (rave::Vector6D *) 0 ;
  rave::Point3D result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vector6D **)&jarg1; 
  result = ((rave::Vector6D const *)arg1)->position();
  *(rave::Point3D **)&jresult = new rave::Point3D((const rave::Point3D &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveVector6D_1addMomentum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  rave::Vector6D *arg1 = (rave::Vector6D *) 0 ;
  rave::Vector3D *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Vector6D **)&jarg1; 
  arg2 = *(rave::Vector3D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector3D const & reference is null");
    return ;
  } 
  (arg1)->addMomentum((rave::Vector3D const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveVector6D_1equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  rave::Vector6D *arg1 = (rave::Vector6D *) 0 ;
  rave::Vector6D *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Vector6D **)&jarg1; 
  arg2 = *(rave::Vector6D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector6D const & reference is null");
    return 0;
  } 
  result = (bool)((rave::Vector6D const *)arg1)->equal((rave::Vector6D const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_at_hephy_Rave_raveJNI_RaveVector6D_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  rave::Vector6D *arg1 = (rave::Vector6D *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vector6D **)&jarg1; 
  result = (char *)rave_Vector6D_toString(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_at_hephy_Rave_raveJNI_RaveVector6D_1_1_1str_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  rave::Vector6D *arg1 = (rave::Vector6D *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vector6D **)&jarg1; 
  result = rave_Vector6D___str__(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveEquals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  rave::Vector6D *arg1 = 0 ;
  rave::Vector6D *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Vector6D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector6D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Vector6D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector6D const & reference is null");
    return 0;
  } 
  result = (bool)rave::operator ==((rave::Vector6D const &)*arg1,(rave::Vector6D const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveCovariance3D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  rave::Covariance3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (rave::Covariance3D *)new rave::Covariance3D(arg1,arg2,arg3,arg4,arg5,arg6);
  *(rave::Covariance3D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveCovariance3D_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rave::Covariance3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rave::Covariance3D *)new rave::Covariance3D();
  *(rave::Covariance3D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance3D_1dxx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance3D *arg1 = (rave::Covariance3D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance3D **)&jarg1; 
  result = (float)((rave::Covariance3D const *)arg1)->dxx();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance3D_1dxy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance3D *arg1 = (rave::Covariance3D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance3D **)&jarg1; 
  result = (float)((rave::Covariance3D const *)arg1)->dxy();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance3D_1dxz(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance3D *arg1 = (rave::Covariance3D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance3D **)&jarg1; 
  result = (float)((rave::Covariance3D const *)arg1)->dxz();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance3D_1dyy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance3D *arg1 = (rave::Covariance3D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance3D **)&jarg1; 
  result = (float)((rave::Covariance3D const *)arg1)->dyy();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance3D_1dyz(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance3D *arg1 = (rave::Covariance3D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance3D **)&jarg1; 
  result = (float)((rave::Covariance3D const *)arg1)->dyz();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance3D_1dzz(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance3D *arg1 = (rave::Covariance3D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance3D **)&jarg1; 
  result = (float)((rave::Covariance3D const *)arg1)->dzz();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance3D_1equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  rave::Covariance3D *arg1 = (rave::Covariance3D *) 0 ;
  rave::Covariance3D *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Covariance3D **)&jarg1; 
  arg2 = *(rave::Covariance3D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Covariance3D const & reference is null");
    return 0;
  } 
  result = (bool)((rave::Covariance3D const *)arg1)->equal((rave::Covariance3D const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance3D_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  rave::Covariance3D *arg1 = (rave::Covariance3D *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance3D **)&jarg1; 
  result = (char *)rave_Covariance3D_toString(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance3D_1_1_1str_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  rave::Covariance3D *arg1 = (rave::Covariance3D *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance3D **)&jarg1; 
  result = rave_Covariance3D___str__(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RaveCovariance3D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::Covariance3D *arg1 = (rave::Covariance3D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::Covariance3D **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveEquals_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  rave::Covariance3D *arg1 = 0 ;
  rave::Covariance3D *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Covariance3D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Covariance3D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Covariance3D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Covariance3D const & reference is null");
    return 0;
  } 
  result = (bool)rave::operator ==((rave::Covariance3D const &)*arg1,(rave::Covariance3D const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveCovariance33D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7, jfloat jarg8, jfloat jarg9) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  rave::Covariance33D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  result = (rave::Covariance33D *)new rave::Covariance33D(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(rave::Covariance33D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveCovariance33D_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rave::Covariance33D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rave::Covariance33D *)new rave::Covariance33D();
  *(rave::Covariance33D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance33D_1dxpx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance33D *arg1 = (rave::Covariance33D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance33D **)&jarg1; 
  result = (float)((rave::Covariance33D const *)arg1)->dxpx();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance33D_1dxpy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance33D *arg1 = (rave::Covariance33D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance33D **)&jarg1; 
  result = (float)((rave::Covariance33D const *)arg1)->dxpy();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance33D_1dxpz(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance33D *arg1 = (rave::Covariance33D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance33D **)&jarg1; 
  result = (float)((rave::Covariance33D const *)arg1)->dxpz();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance33D_1dypx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance33D *arg1 = (rave::Covariance33D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance33D **)&jarg1; 
  result = (float)((rave::Covariance33D const *)arg1)->dypx();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance33D_1dypy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance33D *arg1 = (rave::Covariance33D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance33D **)&jarg1; 
  result = (float)((rave::Covariance33D const *)arg1)->dypy();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance33D_1dypz(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance33D *arg1 = (rave::Covariance33D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance33D **)&jarg1; 
  result = (float)((rave::Covariance33D const *)arg1)->dypz();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance33D_1dzpx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance33D *arg1 = (rave::Covariance33D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance33D **)&jarg1; 
  result = (float)((rave::Covariance33D const *)arg1)->dzpx();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance33D_1dzpy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance33D *arg1 = (rave::Covariance33D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance33D **)&jarg1; 
  result = (float)((rave::Covariance33D const *)arg1)->dzpy();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance33D_1dzpz(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance33D *arg1 = (rave::Covariance33D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance33D **)&jarg1; 
  result = (float)((rave::Covariance33D const *)arg1)->dzpz();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance33D_1equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  rave::Covariance33D *arg1 = (rave::Covariance33D *) 0 ;
  rave::Covariance33D *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Covariance33D **)&jarg1; 
  arg2 = *(rave::Covariance33D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Covariance33D const & reference is null");
    return 0;
  } 
  result = (bool)((rave::Covariance33D const *)arg1)->equal((rave::Covariance33D const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance33D_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  rave::Covariance33D *arg1 = (rave::Covariance33D *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance33D **)&jarg1; 
  result = (char *)rave_Covariance33D_toString(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance33D_1_1_1str_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  rave::Covariance33D *arg1 = (rave::Covariance33D *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance33D **)&jarg1; 
  result = rave_Covariance33D___str__(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RaveCovariance33D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::Covariance33D *arg1 = (rave::Covariance33D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::Covariance33D **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveEquals_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  rave::Covariance33D *arg1 = 0 ;
  rave::Covariance33D *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Covariance33D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Covariance33D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Covariance33D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Covariance33D const & reference is null");
    return 0;
  } 
  result = (bool)rave::operator ==((rave::Covariance33D const &)*arg1,(rave::Covariance33D const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveCovariance6D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7, jfloat jarg8, jfloat jarg9, jfloat jarg10, jfloat jarg11, jfloat jarg12, jfloat jarg13, jfloat jarg14, jfloat jarg15, jfloat jarg16, jfloat jarg17, jfloat jarg18, jfloat jarg19, jfloat jarg20, jfloat jarg21) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float arg13 ;
  float arg14 ;
  float arg15 ;
  float arg16 ;
  float arg17 ;
  float arg18 ;
  float arg19 ;
  float arg20 ;
  float arg21 ;
  rave::Covariance6D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  arg10 = (float)jarg10; 
  arg11 = (float)jarg11; 
  arg12 = (float)jarg12; 
  arg13 = (float)jarg13; 
  arg14 = (float)jarg14; 
  arg15 = (float)jarg15; 
  arg16 = (float)jarg16; 
  arg17 = (float)jarg17; 
  arg18 = (float)jarg18; 
  arg19 = (float)jarg19; 
  arg20 = (float)jarg20; 
  arg21 = (float)jarg21; 
  result = (rave::Covariance6D *)new rave::Covariance6D(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21);
  *(rave::Covariance6D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveCovariance6D_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rave::Covariance6D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rave::Covariance6D *)new rave::Covariance6D();
  *(rave::Covariance6D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RaveCovariance6D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::Covariance6D *arg1 = (rave::Covariance6D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::Covariance6D **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance6D_1dxx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance6D *arg1 = (rave::Covariance6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance6D **)&jarg1; 
  result = (float)((rave::Covariance6D const *)arg1)->dxx();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance6D_1dxy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance6D *arg1 = (rave::Covariance6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance6D **)&jarg1; 
  result = (float)((rave::Covariance6D const *)arg1)->dxy();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance6D_1dxz(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance6D *arg1 = (rave::Covariance6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance6D **)&jarg1; 
  result = (float)((rave::Covariance6D const *)arg1)->dxz();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance6D_1dyy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance6D *arg1 = (rave::Covariance6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance6D **)&jarg1; 
  result = (float)((rave::Covariance6D const *)arg1)->dyy();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance6D_1dyz(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance6D *arg1 = (rave::Covariance6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance6D **)&jarg1; 
  result = (float)((rave::Covariance6D const *)arg1)->dyz();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance6D_1dzz(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance6D *arg1 = (rave::Covariance6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance6D **)&jarg1; 
  result = (float)((rave::Covariance6D const *)arg1)->dzz();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance6D_1dxpx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance6D *arg1 = (rave::Covariance6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance6D **)&jarg1; 
  result = (float)((rave::Covariance6D const *)arg1)->dxpx();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance6D_1dxpy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance6D *arg1 = (rave::Covariance6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance6D **)&jarg1; 
  result = (float)((rave::Covariance6D const *)arg1)->dxpy();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance6D_1dxpz(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance6D *arg1 = (rave::Covariance6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance6D **)&jarg1; 
  result = (float)((rave::Covariance6D const *)arg1)->dxpz();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance6D_1dypx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance6D *arg1 = (rave::Covariance6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance6D **)&jarg1; 
  result = (float)((rave::Covariance6D const *)arg1)->dypx();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance6D_1dypy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance6D *arg1 = (rave::Covariance6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance6D **)&jarg1; 
  result = (float)((rave::Covariance6D const *)arg1)->dypy();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance6D_1dypz(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance6D *arg1 = (rave::Covariance6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance6D **)&jarg1; 
  result = (float)((rave::Covariance6D const *)arg1)->dypz();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance6D_1dzpx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance6D *arg1 = (rave::Covariance6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance6D **)&jarg1; 
  result = (float)((rave::Covariance6D const *)arg1)->dzpx();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance6D_1dzpy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance6D *arg1 = (rave::Covariance6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance6D **)&jarg1; 
  result = (float)((rave::Covariance6D const *)arg1)->dzpy();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance6D_1dzpz(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance6D *arg1 = (rave::Covariance6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance6D **)&jarg1; 
  result = (float)((rave::Covariance6D const *)arg1)->dzpz();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance6D_1dpxpx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance6D *arg1 = (rave::Covariance6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance6D **)&jarg1; 
  result = (float)((rave::Covariance6D const *)arg1)->dpxpx();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance6D_1dpxpy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance6D *arg1 = (rave::Covariance6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance6D **)&jarg1; 
  result = (float)((rave::Covariance6D const *)arg1)->dpxpy();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance6D_1dpxpz(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance6D *arg1 = (rave::Covariance6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance6D **)&jarg1; 
  result = (float)((rave::Covariance6D const *)arg1)->dpxpz();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance6D_1dpypy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance6D *arg1 = (rave::Covariance6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance6D **)&jarg1; 
  result = (float)((rave::Covariance6D const *)arg1)->dpypy();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance6D_1dpypz(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance6D *arg1 = (rave::Covariance6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance6D **)&jarg1; 
  result = (float)((rave::Covariance6D const *)arg1)->dpypz();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance6D_1dpzpz(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance6D *arg1 = (rave::Covariance6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance6D **)&jarg1; 
  result = (float)((rave::Covariance6D const *)arg1)->dpzpz();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance6D_1equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  rave::Covariance6D *arg1 = (rave::Covariance6D *) 0 ;
  rave::Covariance6D *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Covariance6D **)&jarg1; 
  arg2 = *(rave::Covariance6D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Covariance6D const & reference is null");
    return 0;
  } 
  result = (bool)((rave::Covariance6D const *)arg1)->equal((rave::Covariance6D const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance6D_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  rave::Covariance6D *arg1 = (rave::Covariance6D *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance6D **)&jarg1; 
  result = (char *)rave_Covariance6D_toString(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance6D_1_1_1str_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  rave::Covariance6D *arg1 = (rave::Covariance6D *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance6D **)&jarg1; 
  result = rave_Covariance6D___str__(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveEquals_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  rave::Covariance6D *arg1 = 0 ;
  rave::Covariance6D *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Covariance6D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Covariance6D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Covariance6D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Covariance6D const & reference is null");
    return 0;
  } 
  result = (bool)rave::operator ==((rave::Covariance6D const &)*arg1,(rave::Covariance6D const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RavePerigeeParameters3D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  rave::PerigeeParameters3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (rave::PerigeeParameters3D *)new rave::PerigeeParameters3D(arg1,arg2,arg3);
  *(rave::PerigeeParameters3D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RavePerigeeParameters3D_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rave::PerigeeParameters3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rave::PerigeeParameters3D *)new rave::PerigeeParameters3D();
  *(rave::PerigeeParameters3D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeParameters3D_1rho(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::PerigeeParameters3D *arg1 = (rave::PerigeeParameters3D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeParameters3D **)&jarg1; 
  result = (float)((rave::PerigeeParameters3D const *)arg1)->rho();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeParameters3D_1theta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::PerigeeParameters3D *arg1 = (rave::PerigeeParameters3D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeParameters3D **)&jarg1; 
  result = (float)((rave::PerigeeParameters3D const *)arg1)->theta();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeParameters3D_1phip(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::PerigeeParameters3D *arg1 = (rave::PerigeeParameters3D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeParameters3D **)&jarg1; 
  result = (float)((rave::PerigeeParameters3D const *)arg1)->phip();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeParameters3D_1equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  rave::PerigeeParameters3D *arg1 = (rave::PerigeeParameters3D *) 0 ;
  rave::PerigeeParameters3D *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::PerigeeParameters3D **)&jarg1; 
  arg2 = *(rave::PerigeeParameters3D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::PerigeeParameters3D const & reference is null");
    return 0;
  } 
  result = (bool)((rave::PerigeeParameters3D const *)arg1)->equal((rave::PerigeeParameters3D const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RavePerigeeParameters3D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::PerigeeParameters3D *arg1 = (rave::PerigeeParameters3D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::PerigeeParameters3D **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveEquals_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  rave::PerigeeParameters3D *arg1 = 0 ;
  rave::PerigeeParameters3D *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::PerigeeParameters3D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::PerigeeParameters3D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::PerigeeParameters3D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::PerigeeParameters3D const & reference is null");
    return 0;
  } 
  result = (bool)rave::operator ==((rave::PerigeeParameters3D const &)*arg1,(rave::PerigeeParameters3D const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RavePerigeeCovariance3D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  rave::PerigeeCovariance3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (rave::PerigeeCovariance3D *)new rave::PerigeeCovariance3D(arg1,arg2,arg3,arg4,arg5,arg6);
  *(rave::PerigeeCovariance3D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RavePerigeeCovariance3D_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rave::PerigeeCovariance3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rave::PerigeeCovariance3D *)new rave::PerigeeCovariance3D();
  *(rave::PerigeeCovariance3D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeCovariance3D_1drr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::PerigeeCovariance3D *arg1 = (rave::PerigeeCovariance3D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeCovariance3D **)&jarg1; 
  result = (float)((rave::PerigeeCovariance3D const *)arg1)->drr();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeCovariance3D_1drt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::PerigeeCovariance3D *arg1 = (rave::PerigeeCovariance3D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeCovariance3D **)&jarg1; 
  result = (float)((rave::PerigeeCovariance3D const *)arg1)->drt();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeCovariance3D_1drp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::PerigeeCovariance3D *arg1 = (rave::PerigeeCovariance3D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeCovariance3D **)&jarg1; 
  result = (float)((rave::PerigeeCovariance3D const *)arg1)->drp();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeCovariance3D_1dtt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::PerigeeCovariance3D *arg1 = (rave::PerigeeCovariance3D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeCovariance3D **)&jarg1; 
  result = (float)((rave::PerigeeCovariance3D const *)arg1)->dtt();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeCovariance3D_1dtp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::PerigeeCovariance3D *arg1 = (rave::PerigeeCovariance3D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeCovariance3D **)&jarg1; 
  result = (float)((rave::PerigeeCovariance3D const *)arg1)->dtp();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeCovariance3D_1dpp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::PerigeeCovariance3D *arg1 = (rave::PerigeeCovariance3D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeCovariance3D **)&jarg1; 
  result = (float)((rave::PerigeeCovariance3D const *)arg1)->dpp();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RavePerigeeCovariance3D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::PerigeeCovariance3D *arg1 = (rave::PerigeeCovariance3D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::PerigeeCovariance3D **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RavePerigeeParameters5D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  rave::PerigeeParameters5D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (rave::PerigeeParameters5D *)new rave::PerigeeParameters5D(arg1,arg2,arg3,arg4,arg5);
  *(rave::PerigeeParameters5D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RavePerigeeParameters5D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  rave::PerigeeParameters3D *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  rave::PerigeeParameters5D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeParameters3D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::PerigeeParameters3D const & reference is null");
    return 0;
  } 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (rave::PerigeeParameters5D *)new rave::PerigeeParameters5D((rave::PerigeeParameters3D const &)*arg1,arg2,arg3);
  *(rave::PerigeeParameters5D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RavePerigeeParameters5D_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rave::PerigeeParameters5D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rave::PerigeeParameters5D *)new rave::PerigeeParameters5D();
  *(rave::PerigeeParameters5D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeParameters5D_1epsilon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::PerigeeParameters5D *arg1 = (rave::PerigeeParameters5D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeParameters5D **)&jarg1; 
  result = (float)((rave::PerigeeParameters5D const *)arg1)->epsilon();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeParameters5D_1zp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::PerigeeParameters5D *arg1 = (rave::PerigeeParameters5D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeParameters5D **)&jarg1; 
  result = (float)((rave::PerigeeParameters5D const *)arg1)->zp();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeParameters5D_1equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  rave::PerigeeParameters5D *arg1 = (rave::PerigeeParameters5D *) 0 ;
  rave::PerigeeParameters5D *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::PerigeeParameters5D **)&jarg1; 
  arg2 = *(rave::PerigeeParameters5D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::PerigeeParameters5D const & reference is null");
    return 0;
  } 
  result = (bool)((rave::PerigeeParameters5D const *)arg1)->equal((rave::PerigeeParameters5D const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RavePerigeeParameters5D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::PerigeeParameters5D *arg1 = (rave::PerigeeParameters5D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::PerigeeParameters5D **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveEquals_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  rave::PerigeeParameters5D *arg1 = 0 ;
  rave::PerigeeParameters5D *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::PerigeeParameters5D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::PerigeeParameters5D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::PerigeeParameters5D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::PerigeeParameters5D const & reference is null");
    return 0;
  } 
  result = (bool)rave::operator ==((rave::PerigeeParameters5D const &)*arg1,(rave::PerigeeParameters5D const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RavePerigeeCovariance5D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7, jfloat jarg8, jfloat jarg9, jfloat jarg10, jfloat jarg11, jfloat jarg12, jfloat jarg13, jfloat jarg14, jfloat jarg15) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float arg13 ;
  float arg14 ;
  float arg15 ;
  rave::PerigeeCovariance5D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  arg10 = (float)jarg10; 
  arg11 = (float)jarg11; 
  arg12 = (float)jarg12; 
  arg13 = (float)jarg13; 
  arg14 = (float)jarg14; 
  arg15 = (float)jarg15; 
  result = (rave::PerigeeCovariance5D *)new rave::PerigeeCovariance5D(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  *(rave::PerigeeCovariance5D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RavePerigeeCovariance5D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7, jfloat jarg8, jfloat jarg9, jfloat jarg10) {
  jlong jresult = 0 ;
  rave::PerigeeCovariance3D *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  rave::PerigeeCovariance5D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeCovariance3D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::PerigeeCovariance3D const & reference is null");
    return 0;
  } 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  arg10 = (float)jarg10; 
  result = (rave::PerigeeCovariance5D *)new rave::PerigeeCovariance5D((rave::PerigeeCovariance3D const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  *(rave::PerigeeCovariance5D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RavePerigeeCovariance5D_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rave::PerigeeCovariance5D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rave::PerigeeCovariance5D *)new rave::PerigeeCovariance5D();
  *(rave::PerigeeCovariance5D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeCovariance5D_1dre(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::PerigeeCovariance5D *arg1 = (rave::PerigeeCovariance5D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeCovariance5D **)&jarg1; 
  result = (float)((rave::PerigeeCovariance5D const *)arg1)->dre();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeCovariance5D_1drz(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::PerigeeCovariance5D *arg1 = (rave::PerigeeCovariance5D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeCovariance5D **)&jarg1; 
  result = (float)((rave::PerigeeCovariance5D const *)arg1)->drz();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeCovariance5D_1dte(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::PerigeeCovariance5D *arg1 = (rave::PerigeeCovariance5D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeCovariance5D **)&jarg1; 
  result = (float)((rave::PerigeeCovariance5D const *)arg1)->dte();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeCovariance5D_1dtz(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::PerigeeCovariance5D *arg1 = (rave::PerigeeCovariance5D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeCovariance5D **)&jarg1; 
  result = (float)((rave::PerigeeCovariance5D const *)arg1)->dtz();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeCovariance5D_1dpe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::PerigeeCovariance5D *arg1 = (rave::PerigeeCovariance5D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeCovariance5D **)&jarg1; 
  result = (float)((rave::PerigeeCovariance5D const *)arg1)->dpe();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeCovariance5D_1dpz(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::PerigeeCovariance5D *arg1 = (rave::PerigeeCovariance5D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeCovariance5D **)&jarg1; 
  result = (float)((rave::PerigeeCovariance5D const *)arg1)->dpz();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeCovariance5D_1dee(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::PerigeeCovariance5D *arg1 = (rave::PerigeeCovariance5D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeCovariance5D **)&jarg1; 
  result = (float)((rave::PerigeeCovariance5D const *)arg1)->dee();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeCovariance5D_1dez(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::PerigeeCovariance5D *arg1 = (rave::PerigeeCovariance5D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeCovariance5D **)&jarg1; 
  result = (float)((rave::PerigeeCovariance5D const *)arg1)->dez();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeCovariance5D_1dzz(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::PerigeeCovariance5D *arg1 = (rave::PerigeeCovariance5D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeCovariance5D **)&jarg1; 
  result = (float)((rave::PerigeeCovariance5D const *)arg1)->dzz();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RavePerigeeCovariance5D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::PerigeeCovariance5D *arg1 = (rave::PerigeeCovariance5D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::PerigeeCovariance5D **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveMagneticField_1inTesla(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  rave::MagneticField *arg1 = (rave::MagneticField *) 0 ;
  rave::Point3D *arg2 = 0 ;
  rave::Vector3D result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::MagneticField **)&jarg1; 
  arg2 = *(rave::Point3D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return 0;
  } 
  result = ((rave::MagneticField const *)arg1)->inTesla((rave::Point3D const &)*arg2);
  *(rave::Vector3D **)&jresult = new rave::Vector3D((const rave::Vector3D &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveMagneticField_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::MagneticField *arg1 = (rave::MagneticField *) 0 ;
  rave::MagneticField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::MagneticField **)&jarg1; 
  result = (rave::MagneticField *)((rave::MagneticField const *)arg1)->copy();
  *(rave::MagneticField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RaveMagneticField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::MagneticField *arg1 = (rave::MagneticField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::MagneticField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveConstantMagneticField_1inTesla(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  rave::ConstantMagneticField *arg1 = (rave::ConstantMagneticField *) 0 ;
  rave::Point3D *arg2 = 0 ;
  rave::Vector3D result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::ConstantMagneticField **)&jarg1; 
  arg2 = *(rave::Point3D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return 0;
  } 
  result = ((rave::ConstantMagneticField const *)arg1)->inTesla((rave::Point3D const &)*arg2);
  *(rave::Vector3D **)&jresult = new rave::Vector3D((const rave::Vector3D &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveConstantMagneticField_1inTeslaSwigExplicitRaveConstantMagneticField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  rave::ConstantMagneticField *arg1 = (rave::ConstantMagneticField *) 0 ;
  rave::Point3D *arg2 = 0 ;
  rave::Vector3D result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::ConstantMagneticField **)&jarg1; 
  arg2 = *(rave::Point3D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return 0;
  } 
  result = ((rave::ConstantMagneticField const *)arg1)->rave::ConstantMagneticField::inTesla((rave::Point3D const &)*arg2);
  *(rave::Vector3D **)&jresult = new rave::Vector3D((const rave::Vector3D &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveConstantMagneticField_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::ConstantMagneticField *arg1 = (rave::ConstantMagneticField *) 0 ;
  rave::MagneticField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::ConstantMagneticField **)&jarg1; 
  result = (rave::MagneticField *)((rave::ConstantMagneticField const *)arg1)->copy();
  *(rave::MagneticField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveConstantMagneticField_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rave::ConstantMagneticField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rave::ConstantMagneticField *)new rave::ConstantMagneticField();
  *(rave::ConstantMagneticField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveConstantMagneticField_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  rave::ConstantMagneticField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (rave::ConstantMagneticField *)new rave::ConstantMagneticField(arg1,arg2,arg3);
  *(rave::ConstantMagneticField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveConstantMagneticField_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jlong jresult = 0 ;
  float arg1 ;
  rave::ConstantMagneticField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  result = (rave::ConstantMagneticField *)new rave::ConstantMagneticField(arg1);
  *(rave::ConstantMagneticField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RaveConstantMagneticField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::ConstantMagneticField *arg1 = (rave::ConstantMagneticField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::ConstantMagneticField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RavePropagator_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::Propagator *arg1 = (rave::Propagator *) 0 ;
  rave::Propagator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Propagator **)&jarg1; 
  result = (rave::Propagator *)((rave::Propagator const *)arg1)->copy();
  *(rave::Propagator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RavePropagator_1closestTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jlong jresult = 0 ;
  rave::Propagator *arg1 = (rave::Propagator *) 0 ;
  rave::Track *arg2 = 0 ;
  rave::Point3D *arg3 = 0 ;
  bool arg4 ;
  rave::Track result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::Propagator **)&jarg1; 
  arg2 = *(rave::Track **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Track const & reference is null");
    return 0;
  } 
  arg3 = *(rave::Point3D **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = ((rave::Propagator const *)arg1)->closestTo((rave::Track const &)*arg2,(rave::Point3D const &)*arg3,arg4);
  *(rave::Track **)&jresult = new rave::Track((const rave::Track &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RavePropagator_1to_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  rave::Propagator *arg1 = (rave::Propagator *) 0 ;
  rave::Track *arg2 = 0 ;
  ravesurf::Plane *arg3 = 0 ;
  SwigValueWrapper< std::pair< rave::Track,double > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::Propagator **)&jarg1; 
  arg2 = *(rave::Track **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Track const & reference is null");
    return 0;
  } 
  arg3 = *(ravesurf::Plane **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ravesurf::Plane const & reference is null");
    return 0;
  } 
  result = ((rave::Propagator const *)arg1)->to((rave::Track const &)*arg2,(ravesurf::Plane const &)*arg3);
  *(std::pair< rave::Track,double > **)&jresult = new std::pair< rave::Track,double >((const std::pair< rave::Track,double > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RavePropagator_1to_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  rave::Propagator *arg1 = (rave::Propagator *) 0 ;
  rave::Track *arg2 = 0 ;
  ravesurf::Cylinder *arg3 = 0 ;
  SwigValueWrapper< std::pair< rave::Track,double > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::Propagator **)&jarg1; 
  arg2 = *(rave::Track **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Track const & reference is null");
    return 0;
  } 
  arg3 = *(ravesurf::Cylinder **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ravesurf::Cylinder const & reference is null");
    return 0;
  } 
  result = ((rave::Propagator const *)arg1)->to((rave::Track const &)*arg2,(ravesurf::Cylinder const &)*arg3);
  *(std::pair< rave::Track,double > **)&jresult = new std::pair< rave::Track,double >((const std::pair< rave::Track,double > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RavePropagator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::Propagator *arg1 = (rave::Propagator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::Propagator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RavePropagator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rave::Propagator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rave::Propagator *)new SwigDirector_RavePropagator(jenv);
  *(rave::Propagator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RavePropagator_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  rave::Propagator *obj = *((rave::Propagator **)&objarg);
  (void)jcls;
  SwigDirector_RavePropagator *director = dynamic_cast<SwigDirector_RavePropagator *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RavePropagator_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  rave::Propagator *obj = *((rave::Propagator **)&objarg);
  SwigDirector_RavePropagator *director = dynamic_cast<SwigDirector_RavePropagator *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveVacuumPropagator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rave::VacuumPropagator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rave::VacuumPropagator *)new SwigDirector_RaveVacuumPropagator(jenv);
  *(rave::VacuumPropagator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVacuumPropagator_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::VacuumPropagator *arg1 = (rave::VacuumPropagator *) 0 ;
  rave::Propagator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::VacuumPropagator **)&jarg1; 
  result = (rave::Propagator *)((rave::VacuumPropagator const *)arg1)->copy();
  *(rave::Propagator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVacuumPropagator_1copySwigExplicitRaveVacuumPropagator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::VacuumPropagator *arg1 = (rave::VacuumPropagator *) 0 ;
  rave::Propagator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::VacuumPropagator **)&jarg1; 
  result = (rave::Propagator *)((rave::VacuumPropagator const *)arg1)->rave::VacuumPropagator::copy();
  *(rave::Propagator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVacuumPropagator_1closestTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jlong jresult = 0 ;
  rave::VacuumPropagator *arg1 = (rave::VacuumPropagator *) 0 ;
  rave::Track *arg2 = 0 ;
  rave::Point3D *arg3 = 0 ;
  bool arg4 ;
  rave::Track result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::VacuumPropagator **)&jarg1; 
  arg2 = *(rave::Track **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Track const & reference is null");
    return 0;
  } 
  arg3 = *(rave::Point3D **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = ((rave::VacuumPropagator const *)arg1)->closestTo((rave::Track const &)*arg2,(rave::Point3D const &)*arg3,arg4);
  *(rave::Track **)&jresult = new rave::Track((const rave::Track &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVacuumPropagator_1closestToSwigExplicitRaveVacuumPropagator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jlong jresult = 0 ;
  rave::VacuumPropagator *arg1 = (rave::VacuumPropagator *) 0 ;
  rave::Track *arg2 = 0 ;
  rave::Point3D *arg3 = 0 ;
  bool arg4 ;
  rave::Track result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::VacuumPropagator **)&jarg1; 
  arg2 = *(rave::Track **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Track const & reference is null");
    return 0;
  } 
  arg3 = *(rave::Point3D **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = ((rave::VacuumPropagator const *)arg1)->rave::VacuumPropagator::closestTo((rave::Track const &)*arg2,(rave::Point3D const &)*arg3,arg4);
  *(rave::Track **)&jresult = new rave::Track((const rave::Track &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVacuumPropagator_1to_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  rave::VacuumPropagator *arg1 = (rave::VacuumPropagator *) 0 ;
  rave::Track *arg2 = 0 ;
  ravesurf::Plane *arg3 = 0 ;
  SwigValueWrapper< std::pair< rave::Track,double > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::VacuumPropagator **)&jarg1; 
  arg2 = *(rave::Track **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Track const & reference is null");
    return 0;
  } 
  arg3 = *(ravesurf::Plane **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ravesurf::Plane const & reference is null");
    return 0;
  } 
  result = ((rave::VacuumPropagator const *)arg1)->to((rave::Track const &)*arg2,(ravesurf::Plane const &)*arg3);
  *(std::pair< rave::Track,double > **)&jresult = new std::pair< rave::Track,double >((const std::pair< rave::Track,double > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVacuumPropagator_1toSwigExplicitRaveVacuumPropagator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  rave::VacuumPropagator *arg1 = (rave::VacuumPropagator *) 0 ;
  rave::Track *arg2 = 0 ;
  ravesurf::Plane *arg3 = 0 ;
  SwigValueWrapper< std::pair< rave::Track,double > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::VacuumPropagator **)&jarg1; 
  arg2 = *(rave::Track **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Track const & reference is null");
    return 0;
  } 
  arg3 = *(ravesurf::Plane **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ravesurf::Plane const & reference is null");
    return 0;
  } 
  result = ((rave::VacuumPropagator const *)arg1)->rave::VacuumPropagator::to((rave::Track const &)*arg2,(ravesurf::Plane const &)*arg3);
  *(std::pair< rave::Track,double > **)&jresult = new std::pair< rave::Track,double >((const std::pair< rave::Track,double > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVacuumPropagator_1to_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  rave::VacuumPropagator *arg1 = (rave::VacuumPropagator *) 0 ;
  rave::Track *arg2 = 0 ;
  ravesurf::Cylinder *arg3 = 0 ;
  SwigValueWrapper< std::pair< rave::Track,double > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::VacuumPropagator **)&jarg1; 
  arg2 = *(rave::Track **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Track const & reference is null");
    return 0;
  } 
  arg3 = *(ravesurf::Cylinder **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ravesurf::Cylinder const & reference is null");
    return 0;
  } 
  result = ((rave::VacuumPropagator const *)arg1)->to((rave::Track const &)*arg2,(ravesurf::Cylinder const &)*arg3);
  *(std::pair< rave::Track,double > **)&jresult = new std::pair< rave::Track,double >((const std::pair< rave::Track,double > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVacuumPropagator_1toSwigExplicitRaveVacuumPropagator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  rave::VacuumPropagator *arg1 = (rave::VacuumPropagator *) 0 ;
  rave::Track *arg2 = 0 ;
  ravesurf::Cylinder *arg3 = 0 ;
  SwigValueWrapper< std::pair< rave::Track,double > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::VacuumPropagator **)&jarg1; 
  arg2 = *(rave::Track **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Track const & reference is null");
    return 0;
  } 
  arg3 = *(ravesurf::Cylinder **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ravesurf::Cylinder const & reference is null");
    return 0;
  } 
  result = ((rave::VacuumPropagator const *)arg1)->rave::VacuumPropagator::to((rave::Track const &)*arg2,(ravesurf::Cylinder const &)*arg3);
  *(std::pair< rave::Track,double > **)&jresult = new std::pair< rave::Track,double >((const std::pair< rave::Track,double > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RaveVacuumPropagator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::VacuumPropagator *arg1 = (rave::VacuumPropagator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::VacuumPropagator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveVacuumPropagator_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  rave::VacuumPropagator *obj = *((rave::VacuumPropagator **)&objarg);
  (void)jcls;
  SwigDirector_RaveVacuumPropagator *director = dynamic_cast<SwigDirector_RaveVacuumPropagator *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveVacuumPropagator_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  rave::VacuumPropagator *obj = *((rave::VacuumPropagator **)&objarg);
  SwigDirector_RaveVacuumPropagator *director = dynamic_cast<SwigDirector_RaveVacuumPropagator *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RavePlane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  rave::Point3D *arg1 = 0 ;
  rave::Point3D *arg2 = 0 ;
  ravesurf::Plane *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Point3D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Point3D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return 0;
  } 
  result = (ravesurf::Plane *)new ravesurf::Plane((rave::Point3D const &)*arg1,(rave::Point3D const &)*arg2);
  *(ravesurf::Plane **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RavePlane_1position(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ravesurf::Plane *arg1 = (ravesurf::Plane *) 0 ;
  rave::Point3D result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ravesurf::Plane **)&jarg1; 
  result = ((ravesurf::Plane const *)arg1)->position();
  *(rave::Point3D **)&jresult = new rave::Point3D((const rave::Point3D &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RavePlane_1normalVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ravesurf::Plane *arg1 = (ravesurf::Plane *) 0 ;
  rave::Vector3D result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ravesurf::Plane **)&jarg1; 
  result = ((ravesurf::Plane const *)arg1)->normalVector();
  *(rave::Vector3D **)&jresult = new rave::Vector3D((const rave::Vector3D &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RavePlane(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ravesurf::Plane *arg1 = (ravesurf::Plane *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ravesurf::Plane **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveCylinder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  jlong jresult = 0 ;
  rave::Point3D *arg1 = 0 ;
  rave::Point3D *arg2 = 0 ;
  float arg3 ;
  ravesurf::Cylinder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Point3D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Point3D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = (ravesurf::Cylinder *)new ravesurf::Cylinder((rave::Point3D const &)*arg1,(rave::Point3D const &)*arg2,arg3);
  *(ravesurf::Cylinder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveCylinder_1position(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ravesurf::Cylinder *arg1 = (ravesurf::Cylinder *) 0 ;
  rave::Point3D result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ravesurf::Cylinder **)&jarg1; 
  result = ((ravesurf::Cylinder const *)arg1)->position();
  *(rave::Point3D **)&jresult = new rave::Point3D((const rave::Point3D &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveCylinder_1axis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ravesurf::Cylinder *arg1 = (ravesurf::Cylinder *) 0 ;
  rave::Vector3D result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ravesurf::Cylinder **)&jarg1; 
  result = ((ravesurf::Cylinder const *)arg1)->axis();
  *(rave::Vector3D **)&jresult = new rave::Vector3D((const rave::Vector3D &)result); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCylinder_1radius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  ravesurf::Cylinder *arg1 = (ravesurf::Cylinder *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ravesurf::Cylinder **)&jarg1; 
  result = (float)((ravesurf::Cylinder const *)arg1)->radius();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RaveCylinder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ravesurf::Cylinder *arg1 = (ravesurf::Cylinder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ravesurf::Cylinder **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveEllipsoid3D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  rave::Point3D *arg1 = 0 ;
  rave::Covariance3D *arg2 = 0 ;
  rave::Ellipsoid3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Point3D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Covariance3D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Covariance3D const & reference is null");
    return 0;
  } 
  result = (rave::Ellipsoid3D *)new rave::Ellipsoid3D((rave::Point3D const &)*arg1,(rave::Covariance3D const &)*arg2);
  *(rave::Ellipsoid3D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveEllipsoid3D_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rave::Ellipsoid3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rave::Ellipsoid3D *)new rave::Ellipsoid3D();
  *(rave::Ellipsoid3D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveEllipsoid3D_1point(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::Ellipsoid3D *arg1 = (rave::Ellipsoid3D *) 0 ;
  rave::Point3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Ellipsoid3D **)&jarg1; 
  result = (rave::Point3D *) &((rave::Ellipsoid3D const *)arg1)->point();
  *(rave::Point3D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveEllipsoid3D_1covariance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::Ellipsoid3D *arg1 = (rave::Ellipsoid3D *) 0 ;
  rave::Covariance3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Ellipsoid3D **)&jarg1; 
  result = (rave::Covariance3D *) &((rave::Ellipsoid3D const *)arg1)->covariance();
  *(rave::Covariance3D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveEllipsoid3D_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  rave::Ellipsoid3D *arg1 = (rave::Ellipsoid3D *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Ellipsoid3D **)&jarg1; 
  result = (bool)((rave::Ellipsoid3D const *)arg1)->isValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RaveEllipsoid3D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::Ellipsoid3D *arg1 = (rave::Ellipsoid3D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::Ellipsoid3D **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_at_hephy_Rave_raveJNI_RaveVersion(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = rave::Version();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_centimeter_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::centimeter;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_millimeter_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::millimeter;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_meter_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::meter;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_micrometer_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::micrometer;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_nanometer_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::nanometer;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_nm_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::nm;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_um_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::um;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_mm_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::mm;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_cm_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::cm;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_m_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::m;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_second_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::second;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_nanosecond_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::nanosecond;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_millisecond_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::millisecond;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_microsecond_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::microsecond;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_ns_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::ns;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_s_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::s;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_ms_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::ms;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_gigaelectronvolt_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::gigaelectronvolt;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_megaelectronvolt_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::megaelectronvolt;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_kiloelectronvolt_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::kiloelectronvolt;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_electronvolt_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::electronvolt;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_teraelectronvolt_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::teraelectronvolt;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_MeV_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::MeV;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_eV_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::eV;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_keV_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::keV;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_GeV_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::GeV;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_TeV_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::TeV;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_rad_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::rad;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_millirad_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::millirad;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_mrad_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::mrad;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_speedoflight_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::speedoflight;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_c_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::c;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_Tesla_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::Tesla;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_Gauss_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::Gauss;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_kGauss_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  result = (float)(float)raveunits::kGauss;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveTrack_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jfloat jarg4, jfloat jarg5, jlong jarg6, jstring jarg7) {
  jlong jresult = 0 ;
  rave::Vector6D *arg1 = 0 ;
  rave::Covariance6D *arg2 = 0 ;
  rave::Charge arg3 ;
  float arg4 ;
  float arg5 ;
  void *arg6 = (void *) 0 ;
  std::string arg7 ;
  rave::Track *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Vector6D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector6D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Covariance6D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Covariance6D const & reference is null");
    return 0;
  } 
  arg3 = (rave::Charge)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = *(void **)&jarg6; 
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0); 
  if (!arg7_pstr) return 0;
  (&arg7)->assign(arg7_pstr);
  jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  result = (rave::Track *)new rave::Track((rave::Vector6D const &)*arg1,(rave::Covariance6D const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  *(rave::Track **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveTrack_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jfloat jarg4, jfloat jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  rave::Vector6D *arg1 = 0 ;
  rave::Covariance6D *arg2 = 0 ;
  rave::Charge arg3 ;
  float arg4 ;
  float arg5 ;
  void *arg6 = (void *) 0 ;
  rave::Track *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Vector6D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector6D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Covariance6D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Covariance6D const & reference is null");
    return 0;
  } 
  arg3 = (rave::Charge)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = *(void **)&jarg6; 
  result = (rave::Track *)new rave::Track((rave::Vector6D const &)*arg1,(rave::Covariance6D const &)*arg2,arg3,arg4,arg5,arg6);
  *(rave::Track **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveTrack_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  rave::Vector6D *arg1 = 0 ;
  rave::Covariance6D *arg2 = 0 ;
  rave::Charge arg3 ;
  float arg4 ;
  float arg5 ;
  rave::Track *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Vector6D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector6D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Covariance6D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Covariance6D const & reference is null");
    return 0;
  } 
  arg3 = (rave::Charge)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (rave::Track *)new rave::Track((rave::Vector6D const &)*arg1,(rave::Covariance6D const &)*arg2,arg3,arg4,arg5);
  *(rave::Track **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveTrack_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jfloat jarg5, jfloat jarg6, jlong jarg7, jstring jarg8) {
  jlong jresult = 0 ;
  int arg1 ;
  rave::Vector6D *arg2 = 0 ;
  rave::Covariance6D *arg3 = 0 ;
  rave::Charge arg4 ;
  float arg5 ;
  float arg6 ;
  void *arg7 = (void *) 0 ;
  std::string arg8 ;
  rave::Track *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = (int)jarg1; 
  arg2 = *(rave::Vector6D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector6D const & reference is null");
    return 0;
  } 
  arg3 = *(rave::Covariance6D **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Covariance6D const & reference is null");
    return 0;
  } 
  arg4 = (rave::Charge)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = *(void **)&jarg7; 
  if(!jarg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg8_pstr = (const char *)jenv->GetStringUTFChars(jarg8, 0); 
  if (!arg8_pstr) return 0;
  (&arg8)->assign(arg8_pstr);
  jenv->ReleaseStringUTFChars(jarg8, arg8_pstr); 
  result = (rave::Track *)new rave::Track(arg1,(rave::Vector6D const &)*arg2,(rave::Covariance6D const &)*arg3,arg4,arg5,arg6,arg7,arg8);
  *(rave::Track **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveTrack_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jfloat jarg5, jfloat jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  int arg1 ;
  rave::Vector6D *arg2 = 0 ;
  rave::Covariance6D *arg3 = 0 ;
  rave::Charge arg4 ;
  float arg5 ;
  float arg6 ;
  void *arg7 = (void *) 0 ;
  rave::Track *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = (int)jarg1; 
  arg2 = *(rave::Vector6D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector6D const & reference is null");
    return 0;
  } 
  arg3 = *(rave::Covariance6D **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Covariance6D const & reference is null");
    return 0;
  } 
  arg4 = (rave::Charge)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = *(void **)&jarg7; 
  result = (rave::Track *)new rave::Track(arg1,(rave::Vector6D const &)*arg2,(rave::Covariance6D const &)*arg3,arg4,arg5,arg6,arg7);
  *(rave::Track **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveTrack_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jfloat jarg5, jfloat jarg6) {
  jlong jresult = 0 ;
  int arg1 ;
  rave::Vector6D *arg2 = 0 ;
  rave::Covariance6D *arg3 = 0 ;
  rave::Charge arg4 ;
  float arg5 ;
  float arg6 ;
  rave::Track *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = (int)jarg1; 
  arg2 = *(rave::Vector6D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector6D const & reference is null");
    return 0;
  } 
  arg3 = *(rave::Covariance6D **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Covariance6D const & reference is null");
    return 0;
  } 
  arg4 = (rave::Charge)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (rave::Track *)new rave::Track(arg1,(rave::Vector6D const &)*arg2,(rave::Covariance6D const &)*arg3,arg4,arg5,arg6);
  *(rave::Track **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveTrack_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jfloat jarg4, jfloat jarg5, jint jarg6, jstring jarg7) {
  jlong jresult = 0 ;
  rave::Vector6D *arg1 = 0 ;
  rave::Covariance6D *arg2 = 0 ;
  rave::Charge arg3 ;
  float arg4 ;
  float arg5 ;
  int arg6 ;
  std::string arg7 ;
  rave::Track *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Vector6D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector6D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Covariance6D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Covariance6D const & reference is null");
    return 0;
  } 
  arg3 = (rave::Charge)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (int)jarg6; 
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0); 
  if (!arg7_pstr) return 0;
  (&arg7)->assign(arg7_pstr);
  jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  result = (rave::Track *)new rave::Track((rave::Vector6D const &)*arg1,(rave::Covariance6D const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  *(rave::Track **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveTrack_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jfloat jarg4, jfloat jarg5, jint jarg6) {
  jlong jresult = 0 ;
  rave::Vector6D *arg1 = 0 ;
  rave::Covariance6D *arg2 = 0 ;
  rave::Charge arg3 ;
  float arg4 ;
  float arg5 ;
  int arg6 ;
  rave::Track *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Vector6D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector6D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Covariance6D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Covariance6D const & reference is null");
    return 0;
  } 
  arg3 = (rave::Charge)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (int)jarg6; 
  result = (rave::Track *)new rave::Track((rave::Vector6D const &)*arg1,(rave::Covariance6D const &)*arg2,arg3,arg4,arg5,arg6);
  *(rave::Track **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveTrack_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< float,rave::Track > > *arg1 = 0 ;
  rave::Track *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< float,rave::Track > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< float,rave::Track > > const & reference is null");
    return 0;
  } 
  result = (rave::Track *)new rave::Track((std::vector< std::pair< float,rave::Track > > const &)*arg1);
  *(rave::Track **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveTrack_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  int arg1 ;
  std::vector< std::pair< float,rave::Track > > *arg2 = 0 ;
  rave::Track *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int)jarg1; 
  arg2 = *(std::vector< std::pair< float,rave::Track > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< float,rave::Track > > const & reference is null");
    return 0;
  } 
  result = (rave::Track *)new rave::Track(arg1,(std::vector< std::pair< float,rave::Track > > const &)*arg2);
  *(rave::Track **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveTrack_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rave::BasicTrack *arg1 = 0 ;
  rave::Track *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::BasicTrack **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::BasicTrack const & reference is null");
    return 0;
  } 
  result = (rave::Track *)new rave::Track((rave::BasicTrack const &)*arg1);
  *(rave::Track **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveTrack_1_1SWIG_111(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rave::Track *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rave::Track *)new rave::Track();
  *(rave::Track **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_at_hephy_Rave_raveJNI_RaveTrack_1charge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  rave::Track *arg1 = (rave::Track *) 0 ;
  rave::Charge result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Track **)&jarg1; 
  result = (rave::Charge)((rave::Track const *)arg1)->charge();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveTrack_1state(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::Track *arg1 = (rave::Track *) 0 ;
  rave::Vector6D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Track **)&jarg1; 
  result = (rave::Vector6D *) &((rave::Track const *)arg1)->state();
  *(rave::Vector6D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveTrack_1momentum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::Track *arg1 = (rave::Track *) 0 ;
  rave::Vector3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Track **)&jarg1; 
  result = (rave::Vector3D *) &((rave::Track const *)arg1)->momentum();
  *(rave::Vector3D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveTrack_1position(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::Track *arg1 = (rave::Track *) 0 ;
  rave::Point3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Track **)&jarg1; 
  result = (rave::Point3D *) &((rave::Track const *)arg1)->position();
  *(rave::Point3D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveTrack_1pt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Track *arg1 = (rave::Track *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Track **)&jarg1; 
  result = (float)((rave::Track const *)arg1)->pt();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveTrack_1error(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::Track *arg1 = (rave::Track *) 0 ;
  rave::Covariance6D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Track **)&jarg1; 
  result = (rave::Covariance6D *) &((rave::Track const *)arg1)->error();
  *(rave::Covariance6D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveTrack_1originalObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::Track *arg1 = (rave::Track *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Track **)&jarg1; 
  result = (void *)((rave::Track const *)arg1)->originalObject();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_at_hephy_Rave_raveJNI_RaveTrack_1tag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  rave::Track *arg1 = (rave::Track *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Track **)&jarg1; 
  result = ((rave::Track const *)arg1)->tag();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_at_hephy_Rave_raveJNI_RaveTrack_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  rave::Track *arg1 = (rave::Track *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Track **)&jarg1; 
  result = (int)((rave::Track const *)arg1)->id();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveTrack_1chi2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Track *arg1 = (rave::Track *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Track **)&jarg1; 
  result = (float)((rave::Track const *)arg1)->chi2();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveTrack_1ndof(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Track *arg1 = (rave::Track *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Track **)&jarg1; 
  result = (float)((rave::Track const *)arg1)->ndof();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveTrack_1perigeeParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::Track *arg1 = (rave::Track *) 0 ;
  rave::PerigeeParameters5D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Track **)&jarg1; 
  result = (rave::PerigeeParameters5D *) &((rave::Track const *)arg1)->perigeeParameters();
  *(rave::PerigeeParameters5D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveTrack_1perigeeCovariance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::Track *arg1 = (rave::Track *) 0 ;
  rave::PerigeeCovariance5D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Track **)&jarg1; 
  result = (rave::PerigeeCovariance5D *) &((rave::Track const *)arg1)->perigeeCovariance();
  *(rave::PerigeeCovariance5D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveTrack_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  rave::Track *arg1 = (rave::Track *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Track **)&jarg1; 
  result = (bool)((rave::Track const *)arg1)->isValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveTrack_1components(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::Track *arg1 = (rave::Track *) 0 ;
  std::vector< std::pair< float,rave::Track > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Track **)&jarg1; 
  result = ((rave::Track const *)arg1)->components();
  *(std::vector< std::pair< float,rave::Track > > **)&jresult = new std::vector< std::pair< float,rave::Track > >((const std::vector< std::pair< float,rave::Track > > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveTrack_1RaveEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  rave::Track *arg1 = (rave::Track *) 0 ;
  rave::Track *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Track **)&jarg1; 
  arg2 = *(rave::Track **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Track const & reference is null");
    return 0;
  } 
  result = (bool)((rave::Track const *)arg1)->operator ==((rave::Track const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_at_hephy_Rave_raveJNI_RaveTrack_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  rave::Track *arg1 = (rave::Track *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Track **)&jarg1; 
  result = (char *)rave_Track_toString(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_at_hephy_Rave_raveJNI_RaveTrack_1_1_1str_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  rave::Track *arg1 = (rave::Track *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Track **)&jarg1; 
  result = rave_Track___str__(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RaveTrack(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::Track *arg1 = (rave::Track *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::Track **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveVertex_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rave::Vertex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rave::Vertex *)new rave::Vertex();
  *(rave::Vertex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveVertex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rave::BasicVertex *arg1 = 0 ;
  rave::Vertex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::BasicVertex **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::BasicVertex const & reference is null");
    return 0;
  } 
  result = (rave::Vertex *)new rave::Vertex((rave::BasicVertex const &)*arg1);
  *(rave::Vertex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertex_1position(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::Vertex *arg1 = (rave::Vertex *) 0 ;
  rave::Point3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vertex **)&jarg1; 
  result = (rave::Point3D *) &((rave::Vertex const *)arg1)->position();
  *(rave::Point3D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertex_1error(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::Vertex *arg1 = (rave::Vertex *) 0 ;
  rave::Covariance3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vertex **)&jarg1; 
  result = (rave::Covariance3D *) &((rave::Vertex const *)arg1)->error();
  *(rave::Covariance3D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertex_1trackToVertexCovariance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  rave::Vertex *arg1 = (rave::Vertex *) 0 ;
  rave::Track *arg2 = 0 ;
  rave::Covariance33D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Vertex **)&jarg1; 
  arg2 = *(rave::Track **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Track const & reference is null");
    return 0;
  } 
  result = (rave::Covariance33D *) &((rave::Vertex const *)arg1)->trackToVertexCovariance((rave::Track const &)*arg2);
  *(rave::Covariance33D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveVertex_1hasTrackToVertexCovariance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  rave::Vertex *arg1 = (rave::Vertex *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vertex **)&jarg1; 
  result = (bool)((rave::Vertex const *)arg1)->hasTrackToVertexCovariance();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertex_1trackToTrackCovariance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  rave::Vertex *arg1 = (rave::Vertex *) 0 ;
  rave::Track *arg2 = 0 ;
  rave::Track *arg3 = 0 ;
  rave::Covariance3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::Vertex **)&jarg1; 
  arg2 = *(rave::Track **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Track const & reference is null");
    return 0;
  } 
  arg3 = *(rave::Track **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Track const & reference is null");
    return 0;
  } 
  result = (rave::Covariance3D *) &((rave::Vertex const *)arg1)->trackToTrackCovariance((rave::Track const &)*arg2,(rave::Track const &)*arg3);
  *(rave::Covariance3D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveVertex_1addTrackToVertexCovariance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  rave::Vertex *arg1 = (rave::Vertex *) 0 ;
  rave::Track *arg2 = 0 ;
  rave::Covariance33D *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::Vertex **)&jarg1; 
  arg2 = *(rave::Track **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Track const & reference is null");
    return ;
  } 
  arg3 = *(rave::Covariance33D **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Covariance33D const & reference is null");
    return ;
  } 
  (arg1)->addTrackToVertexCovariance((rave::Track const &)*arg2,(rave::Covariance33D const &)*arg3);
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveVertex_1addTrackToTrackCovariance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  rave::Vertex *arg1 = (rave::Vertex *) 0 ;
  rave::Track *arg2 = 0 ;
  rave::Track *arg3 = 0 ;
  rave::Covariance3D *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(rave::Vertex **)&jarg1; 
  arg2 = *(rave::Track **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Track const & reference is null");
    return ;
  } 
  arg3 = *(rave::Track **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Track const & reference is null");
    return ;
  } 
  arg4 = *(rave::Covariance3D **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Covariance3D const & reference is null");
    return ;
  } 
  (arg1)->addTrackToTrackCovariance((rave::Track const &)*arg2,(rave::Track const &)*arg3,(rave::Covariance3D const &)*arg4);
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertex_1weightedTracks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::Vertex *arg1 = (rave::Vertex *) 0 ;
  std::vector< std::pair< float,rave::Track > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vertex **)&jarg1; 
  result = (std::vector< std::pair< float,rave::Track > > *) &((rave::Vertex const *)arg1)->weightedTracks();
  *(std::vector< std::pair< float,rave::Track > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertex_1tracks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::Vertex *arg1 = (rave::Vertex *) 0 ;
  std::vector< rave::Track > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vertex **)&jarg1; 
  result = ((rave::Vertex const *)arg1)->tracks();
  *(std::vector< rave::Track > **)&jresult = new std::vector< rave::Track >((const std::vector< rave::Track > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertex_1refittedTracks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::Vertex *arg1 = (rave::Vertex *) 0 ;
  std::vector< rave::Track > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vertex **)&jarg1; 
  result = ((rave::Vertex const *)arg1)->refittedTracks();
  *(std::vector< rave::Track > **)&jresult = new std::vector< rave::Track >((const std::vector< rave::Track > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertex_1weightedRefittedTracks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::Vertex *arg1 = (rave::Vertex *) 0 ;
  std::vector< std::pair< float,rave::Track > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vertex **)&jarg1; 
  result = (std::vector< std::pair< float,rave::Track > > *) &((rave::Vertex const *)arg1)->weightedRefittedTracks();
  *(std::vector< std::pair< float,rave::Track > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveVertex_1ndf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Vertex *arg1 = (rave::Vertex *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vertex **)&jarg1; 
  result = (float)((rave::Vertex const *)arg1)->ndf();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveVertex_1chiSquared(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Vertex *arg1 = (rave::Vertex *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vertex **)&jarg1; 
  result = (float)((rave::Vertex const *)arg1)->chiSquared();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_at_hephy_Rave_raveJNI_RaveVertex_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  rave::Vertex *arg1 = (rave::Vertex *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vertex **)&jarg1; 
  result = (int)((rave::Vertex const *)arg1)->id();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveVertex_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  rave::Vertex *arg1 = (rave::Vertex *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vertex **)&jarg1; 
  result = (bool)((rave::Vertex const *)arg1)->isValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveVertex_1hasRefittedTracks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  rave::Vertex *arg1 = (rave::Vertex *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vertex **)&jarg1; 
  result = (bool)((rave::Vertex const *)arg1)->hasRefittedTracks();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveVertex_1RaveEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  rave::Vertex *arg1 = (rave::Vertex *) 0 ;
  rave::Vertex *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Vertex **)&jarg1; 
  arg2 = *(rave::Vertex **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vertex const & reference is null");
    return 0;
  } 
  result = (bool)((rave::Vertex const *)arg1)->operator ==((rave::Vertex const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertex_1refittedTrack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  rave::Vertex *arg1 = (rave::Vertex *) 0 ;
  rave::Track *arg2 = 0 ;
  rave::Track result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Vertex **)&jarg1; 
  arg2 = *(rave::Track **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Track const & reference is null");
    return 0;
  } 
  result = ((rave::Vertex const *)arg1)->refittedTrack((rave::Track const &)*arg2);
  *(rave::Track **)&jresult = new rave::Track((const rave::Track &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertex_1components(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::Vertex *arg1 = (rave::Vertex *) 0 ;
  SwigValueWrapper< std::vector< std::pair< float,rave::Vertex > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vertex **)&jarg1; 
  result = ((rave::Vertex const *)arg1)->components();
  *(std::vector< std::pair< float,rave::Vertex > > **)&jresult = new std::vector< std::pair< float,rave::Vertex > >((const std::vector< std::pair< float,rave::Vertex > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1ConstructWithWeightedTracks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloat jarg4, jfloat jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  rave::Point3D *arg1 = 0 ;
  rave::Covariance3D *arg2 = 0 ;
  std::vector< std::pair< float,rave::Track > > *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  std::vector< std::pair< float,rave::Vertex > > *arg6 = 0 ;
  rave::Vertex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::Point3D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Covariance3D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Covariance3D const & reference is null");
    return 0;
  } 
  arg3 = *(std::vector< std::pair< float,rave::Track > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< float,rave::Track > > const & reference is null");
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = *(std::vector< std::pair< float,rave::Vertex > > **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< float,rave::Vertex > > const & reference is null");
    return 0;
  } 
  result = (rave::Vertex *)new rave::Vertex((rave::Point3D const &)*arg1,(rave::Covariance3D const &)*arg2,(std::vector< std::pair< float,rave::Track > > const &)*arg3,arg4,arg5,(std::vector< std::pair< float,rave::Vertex > > const &)*arg6);
  *(rave::Vertex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1ConstructWithTracks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloat jarg4, jfloat jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  rave::Point3D *arg1 = 0 ;
  rave::Covariance3D *arg2 = 0 ;
  std::vector< rave::Track > *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  std::vector< std::pair< float,rave::Vertex > > *arg6 = 0 ;
  rave::Vertex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::Point3D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Covariance3D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Covariance3D const & reference is null");
    return 0;
  } 
  arg3 = *(std::vector< rave::Track > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track > const & reference is null");
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = *(std::vector< std::pair< float,rave::Vertex > > **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< float,rave::Vertex > > const & reference is null");
    return 0;
  } 
  result = (rave::Vertex *)new rave::Vertex((rave::Point3D const &)*arg1,(rave::Covariance3D const &)*arg2,(std::vector< rave::Track > const &)*arg3,arg4,arg5,(std::vector< std::pair< float,rave::Vertex > > const &)*arg6);
  *(rave::Vertex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1ConstructWithSmoothedWeightedTracks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jfloat jarg5, jfloat jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  rave::Point3D *arg1 = 0 ;
  rave::Covariance3D *arg2 = 0 ;
  std::vector< std::pair< float,rave::Track > > *arg3 = 0 ;
  std::vector< std::pair< float,rave::Track > > *arg4 = 0 ;
  float arg5 ;
  float arg6 ;
  std::vector< std::pair< float,rave::Vertex > > *arg7 = 0 ;
  rave::Vertex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(rave::Point3D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Covariance3D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Covariance3D const & reference is null");
    return 0;
  } 
  arg3 = *(std::vector< std::pair< float,rave::Track > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< float,rave::Track > > const & reference is null");
    return 0;
  } 
  arg4 = *(std::vector< std::pair< float,rave::Track > > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< float,rave::Track > > const & reference is null");
    return 0;
  } 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = *(std::vector< std::pair< float,rave::Vertex > > **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< float,rave::Vertex > > const & reference is null");
    return 0;
  } 
  result = (rave::Vertex *)new rave::Vertex((rave::Point3D const &)*arg1,(rave::Covariance3D const &)*arg2,(std::vector< std::pair< float,rave::Track > > const &)*arg3,(std::vector< std::pair< float,rave::Track > > const &)*arg4,arg5,arg6,(std::vector< std::pair< float,rave::Vertex > > const &)*arg7);
  *(rave::Vertex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveVertex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jfloat jarg5, jfloat jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  rave::Point3D *arg1 = 0 ;
  rave::Covariance3D *arg2 = 0 ;
  std::vector< rave::Track > *arg3 = 0 ;
  std::vector< rave::Track > *arg4 = 0 ;
  float arg5 ;
  float arg6 ;
  std::vector< std::pair< float,rave::Vertex > > *arg7 = 0 ;
  rave::Vertex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(rave::Point3D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Covariance3D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Covariance3D const & reference is null");
    return 0;
  } 
  arg3 = *(std::vector< rave::Track > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track > const & reference is null");
    return 0;
  } 
  arg4 = *(std::vector< rave::Track > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track > const & reference is null");
    return 0;
  } 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = *(std::vector< std::pair< float,rave::Vertex > > **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< float,rave::Vertex > > const & reference is null");
    return 0;
  } 
  result = (rave::Vertex *)new rave::Vertex((rave::Point3D const &)*arg1,(rave::Covariance3D const &)*arg2,(std::vector< rave::Track > const &)*arg3,(std::vector< rave::Track > const &)*arg4,arg5,arg6,(std::vector< std::pair< float,rave::Vertex > > const &)*arg7);
  *(rave::Vertex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_at_hephy_Rave_raveJNI_RaveVertex_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  rave::Vertex *arg1 = (rave::Vertex *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vertex **)&jarg1; 
  result = (char *)rave_Vertex_toString(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_at_hephy_Rave_raveJNI_RaveVertex_1_1_1str_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  rave::Vertex *arg1 = (rave::Vertex *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vertex **)&jarg1; 
  result = rave_Vertex___str__(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RaveVertex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::Vertex *arg1 = (rave::Vertex *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::Vertex **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveVertexFactory_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jint jarg4) {
  jlong jresult = 0 ;
  rave::MagneticField *arg1 = 0 ;
  rave::Propagator *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  rave::VertexFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::MagneticField **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::MagneticField const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Propagator **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Propagator const & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  result = (rave::VertexFactory *)new rave::VertexFactory((rave::MagneticField const &)*arg1,(rave::Propagator const &)*arg2,(std::string const &)*arg3,arg4);
  *(rave::VertexFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveVertexFactory_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  rave::MagneticField *arg1 = 0 ;
  rave::Propagator *arg2 = 0 ;
  std::string *arg3 = 0 ;
  rave::VertexFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::MagneticField **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::MagneticField const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Propagator **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Propagator const & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (rave::VertexFactory *)new rave::VertexFactory((rave::MagneticField const &)*arg1,(rave::Propagator const &)*arg2,(std::string const &)*arg3);
  *(rave::VertexFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveVertexFactory_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  rave::MagneticField *arg1 = 0 ;
  rave::Propagator *arg2 = 0 ;
  rave::VertexFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::MagneticField **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::MagneticField const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Propagator **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Propagator const & reference is null");
    return 0;
  } 
  result = (rave::VertexFactory *)new rave::VertexFactory((rave::MagneticField const &)*arg1,(rave::Propagator const &)*arg2);
  *(rave::VertexFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveVertexFactory_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::MagneticField *arg1 = 0 ;
  rave::VertexFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::MagneticField **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::MagneticField const & reference is null");
    return 0;
  } 
  result = (rave::VertexFactory *)new rave::VertexFactory((rave::MagneticField const &)*arg1);
  *(rave::VertexFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveVertexFactory_1_1SWIG_14(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rave::VertexFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rave::VertexFactory *)new rave::VertexFactory();
  *(rave::VertexFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveVertexFactory_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4, jint jarg5) {
  jlong jresult = 0 ;
  rave::MagneticField *arg1 = 0 ;
  rave::Propagator *arg2 = 0 ;
  rave::Ellipsoid3D *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int arg5 ;
  rave::VertexFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::MagneticField **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::MagneticField const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Propagator **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Propagator const & reference is null");
    return 0;
  } 
  arg3 = *(rave::Ellipsoid3D **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Ellipsoid3D const & reference is null");
    return 0;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5; 
  result = (rave::VertexFactory *)new rave::VertexFactory((rave::MagneticField const &)*arg1,(rave::Propagator const &)*arg2,(rave::Ellipsoid3D const &)*arg3,(std::string const &)*arg4,arg5);
  *(rave::VertexFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveVertexFactory_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jlong jresult = 0 ;
  rave::MagneticField *arg1 = 0 ;
  rave::Propagator *arg2 = 0 ;
  rave::Ellipsoid3D *arg3 = 0 ;
  std::string *arg4 = 0 ;
  rave::VertexFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::MagneticField **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::MagneticField const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Propagator **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Propagator const & reference is null");
    return 0;
  } 
  arg3 = *(rave::Ellipsoid3D **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Ellipsoid3D const & reference is null");
    return 0;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (rave::VertexFactory *)new rave::VertexFactory((rave::MagneticField const &)*arg1,(rave::Propagator const &)*arg2,(rave::Ellipsoid3D const &)*arg3,(std::string const &)*arg4);
  *(rave::VertexFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveVertexFactory_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  rave::MagneticField *arg1 = 0 ;
  rave::Propagator *arg2 = 0 ;
  rave::Ellipsoid3D *arg3 = 0 ;
  rave::VertexFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::MagneticField **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::MagneticField const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Propagator **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Propagator const & reference is null");
    return 0;
  } 
  arg3 = *(rave::Ellipsoid3D **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Ellipsoid3D const & reference is null");
    return 0;
  } 
  result = (rave::VertexFactory *)new rave::VertexFactory((rave::MagneticField const &)*arg1,(rave::Propagator const &)*arg2,(rave::Ellipsoid3D const &)*arg3);
  *(rave::VertexFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveVertexFactory_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::VertexFactory *arg1 = 0 ;
  rave::VertexFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::VertexFactory **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::VertexFactory const & reference is null");
    return 0;
  } 
  result = (rave::VertexFactory *)new rave::VertexFactory((rave::VertexFactory const &)*arg1);
  *(rave::VertexFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RaveVertexFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::VertexFactory *arg1 = (rave::VertexFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::VertexFactory **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexFactory_1create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  rave::VertexFactory *arg1 = (rave::VertexFactory *) 0 ;
  std::vector< rave::Track > *arg2 = 0 ;
  bool arg3 ;
  std::vector< rave::Vertex > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::VertexFactory **)&jarg1; 
  arg2 = *(std::vector< rave::Track > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((rave::VertexFactory const *)arg1)->create((std::vector< rave::Track > const &)*arg2,arg3);
  *(std::vector< rave::Vertex > **)&jresult = new std::vector< rave::Vertex >((const std::vector< rave::Vertex > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexFactory_1create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  rave::VertexFactory *arg1 = (rave::VertexFactory *) 0 ;
  std::vector< rave::Track > *arg2 = 0 ;
  std::vector< rave::Vertex > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::VertexFactory **)&jarg1; 
  arg2 = *(std::vector< rave::Track > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track > const & reference is null");
    return 0;
  } 
  result = ((rave::VertexFactory const *)arg1)->create((std::vector< rave::Track > const &)*arg2);
  *(std::vector< rave::Vertex > **)&jresult = new std::vector< rave::Vertex >((const std::vector< rave::Vertex > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexFactory_1create_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jlong jresult = 0 ;
  rave::VertexFactory *arg1 = (rave::VertexFactory *) 0 ;
  std::vector< rave::Track > *arg2 = 0 ;
  rave::Point3D *arg3 = 0 ;
  bool arg4 ;
  std::vector< rave::Vertex > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::VertexFactory **)&jarg1; 
  arg2 = *(std::vector< rave::Track > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track > const & reference is null");
    return 0;
  } 
  arg3 = *(rave::Point3D **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = ((rave::VertexFactory const *)arg1)->create((std::vector< rave::Track > const &)*arg2,(rave::Point3D const &)*arg3,arg4);
  *(std::vector< rave::Vertex > **)&jresult = new std::vector< rave::Vertex >((const std::vector< rave::Vertex > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexFactory_1create_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  rave::VertexFactory *arg1 = (rave::VertexFactory *) 0 ;
  std::vector< rave::Track > *arg2 = 0 ;
  rave::Point3D *arg3 = 0 ;
  std::vector< rave::Vertex > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::VertexFactory **)&jarg1; 
  arg2 = *(std::vector< rave::Track > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track > const & reference is null");
    return 0;
  } 
  arg3 = *(rave::Point3D **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return 0;
  } 
  result = ((rave::VertexFactory const *)arg1)->create((std::vector< rave::Track > const &)*arg2,(rave::Point3D const &)*arg3);
  *(std::vector< rave::Vertex > **)&jresult = new std::vector< rave::Vertex >((const std::vector< rave::Vertex > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexFactory_1create_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jlong jresult = 0 ;
  rave::VertexFactory *arg1 = (rave::VertexFactory *) 0 ;
  std::vector< rave::Track > *arg2 = 0 ;
  rave::Track *arg3 = 0 ;
  bool arg4 ;
  std::vector< rave::Vertex > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::VertexFactory **)&jarg1; 
  arg2 = *(std::vector< rave::Track > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track > const & reference is null");
    return 0;
  } 
  arg3 = *(rave::Track **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Track const & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = ((rave::VertexFactory const *)arg1)->create((std::vector< rave::Track > const &)*arg2,(rave::Track const &)*arg3,arg4);
  *(std::vector< rave::Vertex > **)&jresult = new std::vector< rave::Vertex >((const std::vector< rave::Vertex > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexFactory_1create_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  rave::VertexFactory *arg1 = (rave::VertexFactory *) 0 ;
  std::vector< rave::Track > *arg2 = 0 ;
  rave::Track *arg3 = 0 ;
  std::vector< rave::Vertex > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::VertexFactory **)&jarg1; 
  arg2 = *(std::vector< rave::Track > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track > const & reference is null");
    return 0;
  } 
  arg3 = *(rave::Track **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Track const & reference is null");
    return 0;
  } 
  result = ((rave::VertexFactory const *)arg1)->create((std::vector< rave::Track > const &)*arg2,(rave::Track const &)*arg3);
  *(std::vector< rave::Vertex > **)&jresult = new std::vector< rave::Vertex >((const std::vector< rave::Vertex > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexFactory_1create_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jlong jresult = 0 ;
  rave::VertexFactory *arg1 = (rave::VertexFactory *) 0 ;
  std::vector< rave::Track > *arg2 = 0 ;
  std::vector< rave::Track > *arg3 = 0 ;
  bool arg4 ;
  std::vector< rave::Vertex > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::VertexFactory **)&jarg1; 
  arg2 = *(std::vector< rave::Track > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track > const & reference is null");
    return 0;
  } 
  arg3 = *(std::vector< rave::Track > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track > const & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = ((rave::VertexFactory const *)arg1)->create((std::vector< rave::Track > const &)*arg2,(std::vector< rave::Track > const &)*arg3,arg4);
  *(std::vector< rave::Vertex > **)&jresult = new std::vector< rave::Vertex >((const std::vector< rave::Vertex > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexFactory_1create_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  rave::VertexFactory *arg1 = (rave::VertexFactory *) 0 ;
  std::vector< rave::Track > *arg2 = 0 ;
  std::vector< rave::Track > *arg3 = 0 ;
  std::vector< rave::Vertex > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::VertexFactory **)&jarg1; 
  arg2 = *(std::vector< rave::Track > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track > const & reference is null");
    return 0;
  } 
  arg3 = *(std::vector< rave::Track > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track > const & reference is null");
    return 0;
  } 
  result = ((rave::VertexFactory const *)arg1)->create((std::vector< rave::Track > const &)*arg2,(std::vector< rave::Track > const &)*arg3);
  *(std::vector< rave::Vertex > **)&jresult = new std::vector< rave::Vertex >((const std::vector< rave::Vertex > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexFactory_1create_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  jlong jresult = 0 ;
  rave::VertexFactory *arg1 = (rave::VertexFactory *) 0 ;
  std::vector< rave::Track > *arg2 = 0 ;
  std::vector< rave::Track > *arg3 = 0 ;
  rave::Track *arg4 = 0 ;
  bool arg5 ;
  std::vector< rave::Vertex > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(rave::VertexFactory **)&jarg1; 
  arg2 = *(std::vector< rave::Track > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track > const & reference is null");
    return 0;
  } 
  arg3 = *(std::vector< rave::Track > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track > const & reference is null");
    return 0;
  } 
  arg4 = *(rave::Track **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Track const & reference is null");
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = ((rave::VertexFactory const *)arg1)->create((std::vector< rave::Track > const &)*arg2,(std::vector< rave::Track > const &)*arg3,(rave::Track const &)*arg4,arg5);
  *(std::vector< rave::Vertex > **)&jresult = new std::vector< rave::Vertex >((const std::vector< rave::Vertex > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexFactory_1create_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  rave::VertexFactory *arg1 = (rave::VertexFactory *) 0 ;
  std::vector< rave::Track > *arg2 = 0 ;
  std::vector< rave::Track > *arg3 = 0 ;
  rave::Track *arg4 = 0 ;
  std::vector< rave::Vertex > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(rave::VertexFactory **)&jarg1; 
  arg2 = *(std::vector< rave::Track > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track > const & reference is null");
    return 0;
  } 
  arg3 = *(std::vector< rave::Track > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track > const & reference is null");
    return 0;
  } 
  arg4 = *(rave::Track **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Track const & reference is null");
    return 0;
  } 
  result = ((rave::VertexFactory const *)arg1)->create((std::vector< rave::Track > const &)*arg2,(std::vector< rave::Track > const &)*arg3,(rave::Track const &)*arg4);
  *(std::vector< rave::Vertex > **)&jresult = new std::vector< rave::Vertex >((const std::vector< rave::Vertex > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexFactory_1create_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  rave::VertexFactory *arg1 = (rave::VertexFactory *) 0 ;
  std::vector< rave::Track > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  std::vector< rave::Vertex > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::VertexFactory **)&jarg1; 
  arg2 = *(std::vector< rave::Track > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track > const & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  result = ((rave::VertexFactory const *)arg1)->create((std::vector< rave::Track > const &)*arg2,(std::string const &)*arg3,arg4);
  *(std::vector< rave::Vertex > **)&jresult = new std::vector< rave::Vertex >((const std::vector< rave::Vertex > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexFactory_1create_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  rave::VertexFactory *arg1 = (rave::VertexFactory *) 0 ;
  std::vector< rave::Track > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< rave::Vertex > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::VertexFactory **)&jarg1; 
  arg2 = *(std::vector< rave::Track > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track > const & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((rave::VertexFactory const *)arg1)->create((std::vector< rave::Track > const &)*arg2,(std::string const &)*arg3);
  *(std::vector< rave::Vertex > **)&jresult = new std::vector< rave::Vertex >((const std::vector< rave::Vertex > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexFactory_1create_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  rave::VertexFactory *arg1 = (rave::VertexFactory *) 0 ;
  std::vector< rave::Track > *arg2 = 0 ;
  rave::Point3D *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool arg5 ;
  std::vector< rave::Vertex > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::VertexFactory **)&jarg1; 
  arg2 = *(std::vector< rave::Track > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track > const & reference is null");
    return 0;
  } 
  arg3 = *(rave::Point3D **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return 0;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = jarg5 ? true : false; 
  result = ((rave::VertexFactory const *)arg1)->create((std::vector< rave::Track > const &)*arg2,(rave::Point3D const &)*arg3,(std::string const &)*arg4,arg5);
  *(std::vector< rave::Vertex > **)&jresult = new std::vector< rave::Vertex >((const std::vector< rave::Vertex > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexFactory_1create_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jlong jresult = 0 ;
  rave::VertexFactory *arg1 = (rave::VertexFactory *) 0 ;
  std::vector< rave::Track > *arg2 = 0 ;
  rave::Point3D *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::vector< rave::Vertex > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::VertexFactory **)&jarg1; 
  arg2 = *(std::vector< rave::Track > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track > const & reference is null");
    return 0;
  } 
  arg3 = *(rave::Point3D **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return 0;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = ((rave::VertexFactory const *)arg1)->create((std::vector< rave::Track > const &)*arg2,(rave::Point3D const &)*arg3,(std::string const &)*arg4);
  *(std::vector< rave::Vertex > **)&jresult = new std::vector< rave::Vertex >((const std::vector< rave::Vertex > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexFactory_1create_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  jlong jresult = 0 ;
  rave::VertexFactory *arg1 = (rave::VertexFactory *) 0 ;
  std::vector< rave::Track > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  rave::Track *arg4 = 0 ;
  bool arg5 ;
  std::vector< rave::Vertex > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(rave::VertexFactory **)&jarg1; 
  arg2 = *(std::vector< rave::Track > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track > const & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(rave::Track **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Track const & reference is null");
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = ((rave::VertexFactory const *)arg1)->create((std::vector< rave::Track > const &)*arg2,(std::string const &)*arg3,(rave::Track const &)*arg4,arg5);
  *(std::vector< rave::Vertex > **)&jresult = new std::vector< rave::Vertex >((const std::vector< rave::Vertex > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexFactory_1create_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  rave::VertexFactory *arg1 = (rave::VertexFactory *) 0 ;
  std::vector< rave::Track > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  rave::Track *arg4 = 0 ;
  std::vector< rave::Vertex > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(rave::VertexFactory **)&jarg1; 
  arg2 = *(std::vector< rave::Track > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track > const & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(rave::Track **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Track const & reference is null");
    return 0;
  } 
  result = ((rave::VertexFactory const *)arg1)->create((std::vector< rave::Track > const &)*arg2,(std::string const &)*arg3,(rave::Track const &)*arg4);
  *(std::vector< rave::Vertex > **)&jresult = new std::vector< rave::Vertex >((const std::vector< rave::Vertex > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexFactory_1create_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  rave::VertexFactory *arg1 = (rave::VertexFactory *) 0 ;
  std::vector< rave::Track > *arg2 = 0 ;
  std::vector< rave::Track > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool arg5 ;
  std::vector< rave::Vertex > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::VertexFactory **)&jarg1; 
  arg2 = *(std::vector< rave::Track > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track > const & reference is null");
    return 0;
  } 
  arg3 = *(std::vector< rave::Track > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track > const & reference is null");
    return 0;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = jarg5 ? true : false; 
  result = ((rave::VertexFactory const *)arg1)->create((std::vector< rave::Track > const &)*arg2,(std::vector< rave::Track > const &)*arg3,(std::string const &)*arg4,arg5);
  *(std::vector< rave::Vertex > **)&jresult = new std::vector< rave::Vertex >((const std::vector< rave::Vertex > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexFactory_1create_1_1SWIG_117(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jlong jresult = 0 ;
  rave::VertexFactory *arg1 = (rave::VertexFactory *) 0 ;
  std::vector< rave::Track > *arg2 = 0 ;
  std::vector< rave::Track > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::vector< rave::Vertex > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::VertexFactory **)&jarg1; 
  arg2 = *(std::vector< rave::Track > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track > const & reference is null");
    return 0;
  } 
  arg3 = *(std::vector< rave::Track > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track > const & reference is null");
    return 0;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = ((rave::VertexFactory const *)arg1)->create((std::vector< rave::Track > const &)*arg2,(std::vector< rave::Track > const &)*arg3,(std::string const &)*arg4);
  *(std::vector< rave::Vertex > **)&jresult = new std::vector< rave::Vertex >((const std::vector< rave::Vertex > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexFactory_1create_1_1SWIG_118(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4, jlong jarg5, jobject jarg5_, jboolean jarg6) {
  jlong jresult = 0 ;
  rave::VertexFactory *arg1 = (rave::VertexFactory *) 0 ;
  std::vector< rave::Track > *arg2 = 0 ;
  std::vector< rave::Track > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  rave::Track *arg5 = 0 ;
  bool arg6 ;
  std::vector< rave::Vertex > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(rave::VertexFactory **)&jarg1; 
  arg2 = *(std::vector< rave::Track > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track > const & reference is null");
    return 0;
  } 
  arg3 = *(std::vector< rave::Track > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track > const & reference is null");
    return 0;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = *(rave::Track **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Track const & reference is null");
    return 0;
  } 
  arg6 = jarg6 ? true : false; 
  result = ((rave::VertexFactory const *)arg1)->create((std::vector< rave::Track > const &)*arg2,(std::vector< rave::Track > const &)*arg3,(std::string const &)*arg4,(rave::Track const &)*arg5,arg6);
  *(std::vector< rave::Vertex > **)&jresult = new std::vector< rave::Vertex >((const std::vector< rave::Vertex > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexFactory_1create_1_1SWIG_119(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  rave::VertexFactory *arg1 = (rave::VertexFactory *) 0 ;
  std::vector< rave::Track > *arg2 = 0 ;
  std::vector< rave::Track > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  rave::Track *arg5 = 0 ;
  std::vector< rave::Vertex > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(rave::VertexFactory **)&jarg1; 
  arg2 = *(std::vector< rave::Track > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track > const & reference is null");
    return 0;
  } 
  arg3 = *(std::vector< rave::Track > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track > const & reference is null");
    return 0;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = *(rave::Track **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Track const & reference is null");
    return 0;
  } 
  result = ((rave::VertexFactory const *)arg1)->create((std::vector< rave::Track > const &)*arg2,(std::vector< rave::Track > const &)*arg3,(std::string const &)*arg4,(rave::Track const &)*arg5);
  *(std::vector< rave::Vertex > **)&jresult = new std::vector< rave::Vertex >((const std::vector< rave::Vertex > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexFactory_1getPropagator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::VertexFactory *arg1 = (rave::VertexFactory *) 0 ;
  rave::Propagator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::VertexFactory **)&jarg1; 
  result = (rave::Propagator *) &((rave::VertexFactory const *)arg1)->getPropagator();
  *(rave::Propagator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexFactory_1getMagneticField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::VertexFactory *arg1 = (rave::VertexFactory *) 0 ;
  rave::MagneticField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::VertexFactory **)&jarg1; 
  result = (rave::MagneticField *) &((rave::VertexFactory const *)arg1)->getMagneticField();
  *(rave::MagneticField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexFactory_1getBeamspot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::VertexFactory *arg1 = (rave::VertexFactory *) 0 ;
  rave::Ellipsoid3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::VertexFactory **)&jarg1; 
  result = (rave::Ellipsoid3D *) &((rave::VertexFactory const *)arg1)->getBeamspot();
  *(rave::Ellipsoid3D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexFactory_1hasBeamspot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  rave::VertexFactory *arg1 = (rave::VertexFactory *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::VertexFactory **)&jarg1; 
  result = (bool)((rave::VertexFactory const *)arg1)->hasBeamspot();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexFactory_1verbosity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  rave::VertexFactory *arg1 = (rave::VertexFactory *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::VertexFactory **)&jarg1; 
  result = (int)((rave::VertexFactory const *)arg1)->verbosity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexFactory_1method(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  rave::VertexFactory *arg1 = (rave::VertexFactory *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::VertexFactory **)&jarg1; 
  result = (std::string *) &((rave::VertexFactory const *)arg1)->method();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexFactory_1setDefaultMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  rave::VertexFactory *arg1 = (rave::VertexFactory *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::VertexFactory **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setDefaultMethod((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexFactory_1setBeamSpot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  rave::VertexFactory *arg1 = (rave::VertexFactory *) 0 ;
  rave::Ellipsoid3D *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::VertexFactory **)&jarg1; 
  arg2 = *(rave::Ellipsoid3D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Ellipsoid3D const & reference is null");
    return ;
  } 
  (arg1)->setBeamSpot((rave::Ellipsoid3D const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexFactory_1reconstructor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::VertexFactory *arg1 = (rave::VertexFactory *) 0 ;
  rave::VertexReconstructor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::VertexFactory **)&jarg1; 
  result = (rave::VertexReconstructor *) &((rave::VertexFactory const *)arg1)->reconstructor();
  *(rave::VertexReconstructor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexFactory_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  rave::VertexFactory *arg1 = (rave::VertexFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::VertexFactory **)&jarg1; 
  (arg1)->init();
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveVertexFactory_1wipe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  rave::VertexFactory *arg1 = (rave::VertexFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::VertexFactory **)&jarg1; 
  ((rave::VertexFactory const *)arg1)->wipe();
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveLogger_1writeToConsole(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  rave::Logger::writeToConsole();
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveLogger_1writeToFile(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  rave::Logger::writeToFile((std::string const &)*arg1);
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveLogger_1writeToStream(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  std::ostream *arg1 = 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::ostream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return ;
  } 
  arg2 = jarg2 ? true : false; 
  rave::Logger::writeToStream(*arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_at_hephy_Rave_raveJNI_RaveLogger_1Error_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  rave::Logger::Level result;
  
  (void)jenv;
  (void)jcls;
  result = (rave::Logger::Level)rave::Logger::Error;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_at_hephy_Rave_raveJNI_RaveLogger_1Warning_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  rave::Logger::Level result;
  
  (void)jenv;
  (void)jcls;
  result = (rave::Logger::Level)rave::Logger::Warning;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_at_hephy_Rave_raveJNI_RaveLogger_1Info_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  rave::Logger::Level result;
  
  (void)jenv;
  (void)jcls;
  result = (rave::Logger::Level)rave::Logger::Info;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_at_hephy_Rave_raveJNI_RaveLogger_1Debug_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  rave::Logger::Level result;
  
  (void)jenv;
  (void)jcls;
  result = (rave::Logger::Level)rave::Logger::Debug;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_at_hephy_Rave_raveJNI_RaveLogger_1ImportantInfo_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  rave::Logger::Level result;
  
  (void)jenv;
  (void)jcls;
  result = (rave::Logger::Level)rave::Logger::ImportantInfo;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveLogger_1setLogLevel(JNIEnv *jenv, jclass jcls, jint jarg1) {
  rave::Logger::Level arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (rave::Logger::Level)jarg1; 
  rave::Logger::setLogLevel(arg1);
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveLogger(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rave::Logger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rave::Logger *)new rave::Logger();
  *(rave::Logger **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RaveLogger(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::Logger *arg1 = (rave::Logger *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::Logger **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveException(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  rave::Exception *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (rave::Exception *)new rave::Exception((std::string const &)*arg1);
  *(rave::Exception **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_at_hephy_Rave_raveJNI_RaveException_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  rave::Exception *arg1 = (rave::Exception *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Exception **)&jarg1; 
  result = ((rave::Exception const *)arg1)->what();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RaveException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::Exception *arg1 = (rave::Exception *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::Exception **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveVector4D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  rave::Vector4D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (rave::Vector4D *)new rave::Vector4D(arg1,arg2,arg3,arg4);
  *(rave::Vector4D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveVector4D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  rave::Vector3D arg1 ;
  float arg2 ;
  rave::Vector3D *argp1 ;
  rave::Vector4D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(rave::Vector3D **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null rave::Vector3D");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (float)jarg2; 
  result = (rave::Vector4D *)new rave::Vector4D(arg1,arg2);
  *(rave::Vector4D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveVector4D_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rave::Vector4D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rave::Vector4D *)new rave::Vector4D();
  *(rave::Vector4D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveVector4D_1m(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Vector4D *arg1 = (rave::Vector4D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vector4D **)&jarg1; 
  result = (float)((rave::Vector4D const *)arg1)->m();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveVector4D_1energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Vector4D *arg1 = (rave::Vector4D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vector4D **)&jarg1; 
  result = (float)((rave::Vector4D const *)arg1)->energy();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveVector4D_1equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  rave::Vector4D *arg1 = (rave::Vector4D *) 0 ;
  rave::Vector4D *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Vector4D **)&jarg1; 
  arg2 = *(rave::Vector4D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector4D const & reference is null");
    return 0;
  } 
  result = (bool)((rave::Vector4D const *)arg1)->equal((rave::Vector4D const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveVector4D_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  rave::Vector4D *arg1 = (rave::Vector4D *) 0 ;
  rave::Vector4D *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Vector4D **)&jarg1; 
  arg2 = *(rave::Vector4D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector4D const & reference is null");
    return ;
  } 
  (arg1)->add((rave::Vector4D const &)*arg2);
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveVector4D_1subtract(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  rave::Vector4D *arg1 = (rave::Vector4D *) 0 ;
  rave::Vector4D *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Vector4D **)&jarg1; 
  arg2 = *(rave::Vector4D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector4D const & reference is null");
    return ;
  } 
  (arg1)->subtract((rave::Vector4D const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVector4D_1p3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::Vector4D *arg1 = (rave::Vector4D *) 0 ;
  rave::Vector3D result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vector4D **)&jarg1; 
  result = ((rave::Vector4D const *)arg1)->p3();
  *(rave::Vector3D **)&jresult = new rave::Vector3D((const rave::Vector3D &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_at_hephy_Rave_raveJNI_RaveVector4D_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  rave::Vector4D *arg1 = (rave::Vector4D *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vector4D **)&jarg1; 
  result = (char *)rave_Vector4D_toString(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_at_hephy_Rave_raveJNI_RaveVector4D_1_1_1str_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  rave::Vector4D *arg1 = (rave::Vector4D *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vector4D **)&jarg1; 
  result = rave_Vector4D___str__(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RaveVector4D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::Vector4D *arg1 = (rave::Vector4D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::Vector4D **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveEquals_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  rave::Vector4D *arg1 = 0 ;
  rave::Vector4D *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Vector4D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector4D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Vector4D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector4D const & reference is null");
    return 0;
  } 
  result = (bool)rave::operator ==((rave::Vector4D const &)*arg1,(rave::Vector4D const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveVector7D_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rave::Vector7D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rave::Vector7D *)new rave::Vector7D();
  *(rave::Vector7D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveVector7D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  rave::Vector7D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (rave::Vector7D *)new rave::Vector7D(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(rave::Vector7D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveVector7D_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  jlong jresult = 0 ;
  rave::Point3D *arg1 = 0 ;
  rave::Vector3D *arg2 = 0 ;
  float arg3 ;
  rave::Vector7D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Point3D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Vector3D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector3D const & reference is null");
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = (rave::Vector7D *)new rave::Vector7D((rave::Point3D const &)*arg1,(rave::Vector3D const &)*arg2,arg3);
  *(rave::Vector7D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RaveVector7D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::Vector7D *arg1 = (rave::Vector7D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::Vector7D **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveVector7D_1m(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Vector7D *arg1 = (rave::Vector7D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vector7D **)&jarg1; 
  result = (float)((rave::Vector7D const *)arg1)->m();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveVector7D_1energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Vector7D *arg1 = (rave::Vector7D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vector7D **)&jarg1; 
  result = (float)((rave::Vector7D const *)arg1)->energy();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVector7D_1p4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::Vector7D *arg1 = (rave::Vector7D *) 0 ;
  rave::Vector4D result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vector7D **)&jarg1; 
  result = ((rave::Vector7D const *)arg1)->p4();
  *(rave::Vector4D **)&jresult = new rave::Vector4D((const rave::Vector4D &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveVector7D_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  rave::Vector7D *arg1 = (rave::Vector7D *) 0 ;
  rave::Vector4D *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Vector7D **)&jarg1; 
  arg2 = *(rave::Vector4D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector4D const & reference is null");
    return ;
  } 
  (arg1)->add((rave::Vector4D const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveVector7D_1equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  rave::Vector7D *arg1 = (rave::Vector7D *) 0 ;
  rave::Vector7D *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Vector7D **)&jarg1; 
  arg2 = *(rave::Vector7D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector7D const & reference is null");
    return 0;
  } 
  result = (bool)((rave::Vector7D const *)arg1)->equal((rave::Vector7D const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_at_hephy_Rave_raveJNI_RaveVector7D_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  rave::Vector7D *arg1 = (rave::Vector7D *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vector7D **)&jarg1; 
  result = (char *)rave_Vector7D_toString(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_at_hephy_Rave_raveJNI_RaveVector7D_1_1_1str_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  rave::Vector7D *arg1 = (rave::Vector7D *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Vector7D **)&jarg1; 
  result = rave_Vector7D___str__(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveEquals_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  rave::Vector7D *arg1 = 0 ;
  rave::Vector7D *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Vector7D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector7D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Vector7D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector7D const & reference is null");
    return 0;
  } 
  result = (bool)rave::operator ==((rave::Vector7D const &)*arg1,(rave::Vector7D const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveCovariance4D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7, jfloat jarg8, jfloat jarg9, jfloat jarg10) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  rave::Covariance4D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  arg10 = (float)jarg10; 
  result = (rave::Covariance4D *)new rave::Covariance4D(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  *(rave::Covariance4D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveCovariance4D_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rave::Covariance4D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rave::Covariance4D *)new rave::Covariance4D();
  *(rave::Covariance4D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance4D_1dxm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance4D *arg1 = (rave::Covariance4D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance4D **)&jarg1; 
  result = (float)((rave::Covariance4D const *)arg1)->dxm();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance4D_1dym(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance4D *arg1 = (rave::Covariance4D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance4D **)&jarg1; 
  result = (float)((rave::Covariance4D const *)arg1)->dym();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance4D_1dzm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance4D *arg1 = (rave::Covariance4D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance4D **)&jarg1; 
  result = (float)((rave::Covariance4D const *)arg1)->dzm();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance4D_1dmm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance4D *arg1 = (rave::Covariance4D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance4D **)&jarg1; 
  result = (float)((rave::Covariance4D const *)arg1)->dmm();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance4D_1equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  rave::Covariance4D *arg1 = (rave::Covariance4D *) 0 ;
  rave::Covariance4D *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Covariance4D **)&jarg1; 
  arg2 = *(rave::Covariance4D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Covariance4D const & reference is null");
    return 0;
  } 
  result = (bool)((rave::Covariance4D const *)arg1)->equal((rave::Covariance4D const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RaveCovariance4D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::Covariance4D *arg1 = (rave::Covariance4D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::Covariance4D **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveEquals_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  rave::Covariance4D *arg1 = 0 ;
  rave::Covariance4D *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Covariance4D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Covariance4D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Covariance4D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Covariance4D const & reference is null");
    return 0;
  } 
  result = (bool)rave::operator ==((rave::Covariance4D const &)*arg1,(rave::Covariance4D const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveCovariance7D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7, jfloat jarg8, jfloat jarg9, jfloat jarg10, jfloat jarg11, jfloat jarg12, jfloat jarg13, jfloat jarg14, jfloat jarg15, jfloat jarg16, jfloat jarg17, jfloat jarg18, jfloat jarg19, jfloat jarg20, jfloat jarg21, jfloat jarg22, jfloat jarg23, jfloat jarg24, jfloat jarg25, jfloat jarg26, jfloat jarg27, jfloat jarg28) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float arg13 ;
  float arg14 ;
  float arg15 ;
  float arg16 ;
  float arg17 ;
  float arg18 ;
  float arg19 ;
  float arg20 ;
  float arg21 ;
  float arg22 ;
  float arg23 ;
  float arg24 ;
  float arg25 ;
  float arg26 ;
  float arg27 ;
  float arg28 ;
  rave::Covariance7D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  arg10 = (float)jarg10; 
  arg11 = (float)jarg11; 
  arg12 = (float)jarg12; 
  arg13 = (float)jarg13; 
  arg14 = (float)jarg14; 
  arg15 = (float)jarg15; 
  arg16 = (float)jarg16; 
  arg17 = (float)jarg17; 
  arg18 = (float)jarg18; 
  arg19 = (float)jarg19; 
  arg20 = (float)jarg20; 
  arg21 = (float)jarg21; 
  arg22 = (float)jarg22; 
  arg23 = (float)jarg23; 
  arg24 = (float)jarg24; 
  arg25 = (float)jarg25; 
  arg26 = (float)jarg26; 
  arg27 = (float)jarg27; 
  arg28 = (float)jarg28; 
  result = (rave::Covariance7D *)new rave::Covariance7D(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28);
  *(rave::Covariance7D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveCovariance7D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7, jfloat jarg8) {
  jlong jresult = 0 ;
  rave::Covariance6D arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  rave::Covariance6D *argp1 ;
  rave::Covariance7D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(rave::Covariance6D **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null rave::Covariance6D");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  result = (rave::Covariance7D *)new rave::Covariance7D(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(rave::Covariance7D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveCovariance7D_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rave::Covariance7D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rave::Covariance7D *)new rave::Covariance7D();
  *(rave::Covariance7D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RaveCovariance7D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::Covariance7D *arg1 = (rave::Covariance7D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::Covariance7D **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance7D_1dxm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance7D *arg1 = (rave::Covariance7D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance7D **)&jarg1; 
  result = (float)((rave::Covariance7D const *)arg1)->dxm();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance7D_1dym(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance7D *arg1 = (rave::Covariance7D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance7D **)&jarg1; 
  result = (float)((rave::Covariance7D const *)arg1)->dym();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance7D_1dzm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance7D *arg1 = (rave::Covariance7D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance7D **)&jarg1; 
  result = (float)((rave::Covariance7D const *)arg1)->dzm();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance7D_1dpxm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance7D *arg1 = (rave::Covariance7D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance7D **)&jarg1; 
  result = (float)((rave::Covariance7D const *)arg1)->dpxm();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance7D_1dpym(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance7D *arg1 = (rave::Covariance7D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance7D **)&jarg1; 
  result = (float)((rave::Covariance7D const *)arg1)->dpym();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance7D_1dpzm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance7D *arg1 = (rave::Covariance7D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance7D **)&jarg1; 
  result = (float)((rave::Covariance7D const *)arg1)->dpzm();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance7D_1dmm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::Covariance7D *arg1 = (rave::Covariance7D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance7D **)&jarg1; 
  result = (float)((rave::Covariance7D const *)arg1)->dmm();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance7D_1equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  rave::Covariance7D *arg1 = (rave::Covariance7D *) 0 ;
  rave::Covariance7D *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Covariance7D **)&jarg1; 
  arg2 = *(rave::Covariance7D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Covariance7D const & reference is null");
    return 0;
  } 
  result = (bool)((rave::Covariance7D const *)arg1)->equal((rave::Covariance7D const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance7D_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  rave::Covariance7D *arg1 = (rave::Covariance7D *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance7D **)&jarg1; 
  result = (char *)rave_Covariance7D_toString(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance7D_1_1_1str_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  rave::Covariance7D *arg1 = (rave::Covariance7D *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Covariance7D **)&jarg1; 
  result = rave_Covariance7D___str__(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveEquals_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  rave::Covariance7D *arg1 = 0 ;
  rave::Covariance7D *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Covariance7D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Covariance7D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Covariance7D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Covariance7D const & reference is null");
    return 0;
  } 
  result = (bool)rave::operator ==((rave::Covariance7D const &)*arg1,(rave::Covariance7D const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RavePerigeeParameters6D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  rave::PerigeeParameters6D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (rave::PerigeeParameters6D *)new rave::PerigeeParameters6D(arg1,arg2,arg3,arg4,arg5,arg6);
  *(rave::PerigeeParameters6D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RavePerigeeParameters6D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  rave::PerigeeParameters5D *arg1 = 0 ;
  float arg2 ;
  rave::PerigeeParameters6D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeParameters5D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::PerigeeParameters5D const & reference is null");
    return 0;
  } 
  arg2 = (float)jarg2; 
  result = (rave::PerigeeParameters6D *)new rave::PerigeeParameters6D((rave::PerigeeParameters5D const &)*arg1,arg2);
  *(rave::PerigeeParameters6D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RavePerigeeParameters6D_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rave::PerigeeParameters6D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rave::PerigeeParameters6D *)new rave::PerigeeParameters6D();
  *(rave::PerigeeParameters6D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RavePerigeeParameters6D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::PerigeeParameters6D *arg1 = (rave::PerigeeParameters6D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::PerigeeParameters6D **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeParameters6D_1mass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::PerigeeParameters6D *arg1 = (rave::PerigeeParameters6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeParameters6D **)&jarg1; 
  result = (float)((rave::PerigeeParameters6D const *)arg1)->mass();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeParameters6D_1energy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::PerigeeParameters6D *arg1 = (rave::PerigeeParameters6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeParameters6D **)&jarg1; 
  result = (float)((rave::PerigeeParameters6D const *)arg1)->energy();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeParameters6D_1equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  rave::PerigeeParameters6D *arg1 = (rave::PerigeeParameters6D *) 0 ;
  rave::PerigeeParameters6D *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::PerigeeParameters6D **)&jarg1; 
  arg2 = *(rave::PerigeeParameters6D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::PerigeeParameters6D const & reference is null");
    return 0;
  } 
  result = (bool)((rave::PerigeeParameters6D const *)arg1)->equal((rave::PerigeeParameters6D const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeParameters6D_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  rave::PerigeeParameters6D *arg1 = (rave::PerigeeParameters6D *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeParameters6D **)&jarg1; 
  result = (char *)rave_PerigeeParameters6D_toString(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeParameters6D_1_1_1str_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  rave::PerigeeParameters6D *arg1 = (rave::PerigeeParameters6D *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeParameters6D **)&jarg1; 
  result = rave_PerigeeParameters6D___str__(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveEquals_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  rave::PerigeeParameters6D *arg1 = 0 ;
  rave::PerigeeParameters6D *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::PerigeeParameters6D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::PerigeeParameters6D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::PerigeeParameters6D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::PerigeeParameters6D const & reference is null");
    return 0;
  } 
  result = (bool)rave::operator ==((rave::PerigeeParameters6D const &)*arg1,(rave::PerigeeParameters6D const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RavePerigeeCovariance6D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7, jfloat jarg8, jfloat jarg9, jfloat jarg10, jfloat jarg11, jfloat jarg12, jfloat jarg13, jfloat jarg14, jfloat jarg15, jfloat jarg16, jfloat jarg17, jfloat jarg18, jfloat jarg19, jfloat jarg20, jfloat jarg21) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float arg13 ;
  float arg14 ;
  float arg15 ;
  float arg16 ;
  float arg17 ;
  float arg18 ;
  float arg19 ;
  float arg20 ;
  float arg21 ;
  rave::PerigeeCovariance6D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  arg10 = (float)jarg10; 
  arg11 = (float)jarg11; 
  arg12 = (float)jarg12; 
  arg13 = (float)jarg13; 
  arg14 = (float)jarg14; 
  arg15 = (float)jarg15; 
  arg16 = (float)jarg16; 
  arg17 = (float)jarg17; 
  arg18 = (float)jarg18; 
  arg19 = (float)jarg19; 
  arg20 = (float)jarg20; 
  arg21 = (float)jarg21; 
  result = (rave::PerigeeCovariance6D *)new rave::PerigeeCovariance6D(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21);
  *(rave::PerigeeCovariance6D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RavePerigeeCovariance6D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7) {
  jlong jresult = 0 ;
  rave::PerigeeCovariance5D *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  rave::PerigeeCovariance6D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeCovariance5D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::PerigeeCovariance5D const & reference is null");
    return 0;
  } 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (rave::PerigeeCovariance6D *)new rave::PerigeeCovariance6D((rave::PerigeeCovariance5D const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(rave::PerigeeCovariance6D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RavePerigeeCovariance6D_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rave::PerigeeCovariance6D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rave::PerigeeCovariance6D *)new rave::PerigeeCovariance6D();
  *(rave::PerigeeCovariance6D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeCovariance6D_1drm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::PerigeeCovariance6D *arg1 = (rave::PerigeeCovariance6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeCovariance6D **)&jarg1; 
  result = (float)((rave::PerigeeCovariance6D const *)arg1)->drm();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeCovariance6D_1dtm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::PerigeeCovariance6D *arg1 = (rave::PerigeeCovariance6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeCovariance6D **)&jarg1; 
  result = (float)((rave::PerigeeCovariance6D const *)arg1)->dtm();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeCovariance6D_1dpm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::PerigeeCovariance6D *arg1 = (rave::PerigeeCovariance6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeCovariance6D **)&jarg1; 
  result = (float)((rave::PerigeeCovariance6D const *)arg1)->dpm();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeCovariance6D_1dem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::PerigeeCovariance6D *arg1 = (rave::PerigeeCovariance6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeCovariance6D **)&jarg1; 
  result = (float)((rave::PerigeeCovariance6D const *)arg1)->dem();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeCovariance6D_1dzm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::PerigeeCovariance6D *arg1 = (rave::PerigeeCovariance6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeCovariance6D **)&jarg1; 
  result = (float)((rave::PerigeeCovariance6D const *)arg1)->dzm();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeCovariance6D_1dmm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::PerigeeCovariance6D *arg1 = (rave::PerigeeCovariance6D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeCovariance6D **)&jarg1; 
  result = (float)((rave::PerigeeCovariance6D const *)arg1)->dmm();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeCovariance6D_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  rave::PerigeeCovariance6D *arg1 = (rave::PerigeeCovariance6D *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeCovariance6D **)&jarg1; 
  result = (char *)rave_PerigeeCovariance6D_toString(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeCovariance6D_1_1_1str_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  rave::PerigeeCovariance6D *arg1 = (rave::PerigeeCovariance6D *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::PerigeeCovariance6D **)&jarg1; 
  result = rave_PerigeeCovariance6D___str__(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RavePerigeeCovariance6D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::PerigeeCovariance6D *arg1 = (rave::PerigeeCovariance6D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::PerigeeCovariance6D **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1BasicKinematicConstraint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rave::BasicKinematicConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rave::BasicKinematicConstraint *)new rave::BasicKinematicConstraint();
  *(rave::BasicKinematicConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1BasicKinematicConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::BasicKinematicConstraint *arg1 = (rave::BasicKinematicConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::BasicKinematicConstraint **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_BasicKinematicConstraint_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::BasicKinematicConstraint *arg1 = (rave::BasicKinematicConstraint *) 0 ;
  rave::BasicKinematicConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::BasicKinematicConstraint **)&jarg1; 
  result = (rave::BasicKinematicConstraint *)((rave::BasicKinematicConstraint const *)arg1)->clone();
  *(rave::BasicKinematicConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_BasicKinematicConstraint_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  rave::BasicKinematicConstraint *arg1 = (rave::BasicKinematicConstraint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::BasicKinematicConstraint **)&jarg1; 
  result = (bool)((rave::BasicKinematicConstraint const *)arg1)->isValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKConstraint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rave::KinematicConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rave::KinematicConstraint *)new rave::KinematicConstraint();
  *(rave::KinematicConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RaveKConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::KinematicConstraint *arg1 = (rave::KinematicConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::KinematicConstraint **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveKMultipleConstraint_1addConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  rave::MultipleKinematicConstraint *arg1 = (rave::MultipleKinematicConstraint *) 0 ;
  rave::KinematicConstraint arg2 ;
  rave::KinematicConstraint *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::MultipleKinematicConstraint **)&jarg1; 
  argp2 = *(rave::KinematicConstraint **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null rave::KinematicConstraint");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->addConstraint(arg2);
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RaveKMultipleConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::MultipleKinematicConstraint *arg1 = (rave::MultipleKinematicConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::MultipleKinematicConstraint **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKConstraintBuilder(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rave::KinematicConstraintBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rave::KinematicConstraintBuilder *)new rave::KinematicConstraintBuilder();
  *(rave::KinematicConstraintBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RaveKConstraintBuilder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::KinematicConstraintBuilder *arg1 = (rave::KinematicConstraintBuilder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::KinematicConstraintBuilder **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKConstraintBuilder_1createBackToBackKinematicConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::KinematicConstraintBuilder *arg1 = (rave::KinematicConstraintBuilder *) 0 ;
  rave::KinematicConstraint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicConstraintBuilder **)&jarg1; 
  result = ((rave::KinematicConstraintBuilder const *)arg1)->createBackToBackKinematicConstraint();
  *(rave::KinematicConstraint **)&jresult = new rave::KinematicConstraint((const rave::KinematicConstraint &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKConstraintBuilder_1createEqualMassKinematicConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::KinematicConstraintBuilder *arg1 = (rave::KinematicConstraintBuilder *) 0 ;
  rave::KinematicConstraint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicConstraintBuilder **)&jarg1; 
  result = ((rave::KinematicConstraintBuilder const *)arg1)->createEqualMassKinematicConstraint();
  *(rave::KinematicConstraint **)&jresult = new rave::KinematicConstraint((const rave::KinematicConstraint &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKConstraintBuilder_1createFourMomentumKinematicConstraint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jlong jresult = 0 ;
  rave::KinematicConstraintBuilder *arg1 = (rave::KinematicConstraintBuilder *) 0 ;
  rave::Vector4D *arg2 = 0 ;
  rave::Vector4D *arg3 = 0 ;
  bool arg4 ;
  rave::KinematicConstraint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::KinematicConstraintBuilder **)&jarg1; 
  arg2 = *(rave::Vector4D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector4D const & reference is null");
    return 0;
  } 
  arg3 = *(rave::Vector4D **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector4D const & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = ((rave::KinematicConstraintBuilder const *)arg1)->createFourMomentumKinematicConstraint((rave::Vector4D const &)*arg2,(rave::Vector4D const &)*arg3,arg4);
  *(rave::KinematicConstraint **)&jresult = new rave::KinematicConstraint((const rave::KinematicConstraint &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKConstraintBuilder_1createFourMomentumKinematicConstraint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  rave::KinematicConstraintBuilder *arg1 = (rave::KinematicConstraintBuilder *) 0 ;
  rave::Vector4D *arg2 = 0 ;
  rave::Vector4D *arg3 = 0 ;
  rave::KinematicConstraint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::KinematicConstraintBuilder **)&jarg1; 
  arg2 = *(rave::Vector4D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector4D const & reference is null");
    return 0;
  } 
  arg3 = *(rave::Vector4D **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector4D const & reference is null");
    return 0;
  } 
  result = ((rave::KinematicConstraintBuilder const *)arg1)->createFourMomentumKinematicConstraint((rave::Vector4D const &)*arg2,(rave::Vector4D const &)*arg3);
  *(rave::KinematicConstraint **)&jresult = new rave::KinematicConstraint((const rave::KinematicConstraint &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKConstraintBuilder_1createMomentumKinematicConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  rave::KinematicConstraintBuilder *arg1 = (rave::KinematicConstraintBuilder *) 0 ;
  rave::Vector3D *arg2 = 0 ;
  rave::Vector3D *arg3 = 0 ;
  rave::KinematicConstraint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::KinematicConstraintBuilder **)&jarg1; 
  arg2 = *(rave::Vector3D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector3D const & reference is null");
    return 0;
  } 
  arg3 = *(rave::Vector3D **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector3D const & reference is null");
    return 0;
  } 
  result = ((rave::KinematicConstraintBuilder const *)arg1)->createMomentumKinematicConstraint((rave::Vector3D const &)*arg2,(rave::Vector3D const &)*arg3);
  *(rave::KinematicConstraint **)&jresult = new rave::KinematicConstraint((const rave::KinematicConstraint &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKConstraintBuilder_1createPointingKinematicConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  rave::KinematicConstraintBuilder *arg1 = (rave::KinematicConstraintBuilder *) 0 ;
  rave::Point3D *arg2 = 0 ;
  rave::KinematicConstraint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::KinematicConstraintBuilder **)&jarg1; 
  arg2 = *(rave::Point3D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return 0;
  } 
  result = ((rave::KinematicConstraintBuilder const *)arg1)->createPointingKinematicConstraint((rave::Point3D const &)*arg2);
  *(rave::KinematicConstraint **)&jresult = new rave::KinematicConstraint((const rave::KinematicConstraint &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKConstraintBuilder_1createSimplePointingConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  rave::KinematicConstraintBuilder *arg1 = (rave::KinematicConstraintBuilder *) 0 ;
  rave::Point3D *arg2 = 0 ;
  rave::KinematicConstraint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::KinematicConstraintBuilder **)&jarg1; 
  arg2 = *(rave::Point3D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return 0;
  } 
  result = ((rave::KinematicConstraintBuilder const *)arg1)->createSimplePointingConstraint((rave::Point3D const &)*arg2);
  *(rave::KinematicConstraint **)&jresult = new rave::KinematicConstraint((const rave::KinematicConstraint &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKConstraintBuilder_1createSmartPointingConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  rave::KinematicConstraintBuilder *arg1 = (rave::KinematicConstraintBuilder *) 0 ;
  rave::Point3D *arg2 = 0 ;
  rave::KinematicConstraint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::KinematicConstraintBuilder **)&jarg1; 
  arg2 = *(rave::Point3D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return 0;
  } 
  result = ((rave::KinematicConstraintBuilder const *)arg1)->createSmartPointingConstraint((rave::Point3D const &)*arg2);
  *(rave::KinematicConstraint **)&jresult = new rave::KinematicConstraint((const rave::KinematicConstraint &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKConstraintBuilder_1createMassKinematicConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  rave::KinematicConstraintBuilder *arg1 = (rave::KinematicConstraintBuilder *) 0 ;
  float *arg2 = 0 ;
  float arg3 ;
  float temp2 ;
  rave::KinematicConstraint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicConstraintBuilder **)&jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  arg3 = (float)jarg3; 
  result = ((rave::KinematicConstraintBuilder const *)arg1)->createMassKinematicConstraint((float const &)*arg2,arg3);
  *(rave::KinematicConstraint **)&jresult = new rave::KinematicConstraint((const rave::KinematicConstraint &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKConstraintBuilder_1createMultipleKinematicConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::KinematicConstraintBuilder *arg1 = (rave::KinematicConstraintBuilder *) 0 ;
  SwigValueWrapper< rave::MultipleKinematicConstraint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicConstraintBuilder **)&jarg1; 
  result = ((rave::KinematicConstraintBuilder const *)arg1)->createMultipleKinematicConstraint();
  *(rave::MultipleKinematicConstraint **)&jresult = new rave::MultipleKinematicConstraint((const rave::MultipleKinematicConstraint &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKConstraintBuilder_1createVertexKinematicConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::KinematicConstraintBuilder *arg1 = (rave::KinematicConstraintBuilder *) 0 ;
  rave::KinematicConstraint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicConstraintBuilder **)&jarg1; 
  result = ((rave::KinematicConstraintBuilder const *)arg1)->createVertexKinematicConstraint();
  *(rave::KinematicConstraint **)&jresult = new rave::KinematicConstraint((const rave::KinematicConstraint &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKConstraintBuilder_1createTwoTrackMassKinematicConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  rave::KinematicConstraintBuilder *arg1 = (rave::KinematicConstraintBuilder *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  rave::KinematicConstraint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicConstraintBuilder **)&jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = ((rave::KinematicConstraintBuilder const *)arg1)->createTwoTrackMassKinematicConstraint((float const &)*arg2);
  *(rave::KinematicConstraint **)&jresult = new rave::KinematicConstraint((const rave::KinematicConstraint &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKConstraintBuilder_1createMultiTrackMassKinematicConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jint jarg3) {
  jlong jresult = 0 ;
  rave::KinematicConstraintBuilder *arg1 = (rave::KinematicConstraintBuilder *) 0 ;
  float *arg2 = 0 ;
  int arg3 ;
  float temp2 ;
  rave::KinematicConstraint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicConstraintBuilder **)&jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  arg3 = (int)jarg3; 
  result = ((rave::KinematicConstraintBuilder const *)arg1)->createMultiTrackMassKinematicConstraint((float const &)*arg2,arg3);
  *(rave::KinematicConstraint **)&jresult = new rave::KinematicConstraint((const rave::KinematicConstraint &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKParticle_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rave::KinematicParticle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rave::KinematicParticle *)new rave::KinematicParticle();
  *(rave::KinematicParticle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKParticle_1fullstate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::KinematicParticle *arg1 = (rave::KinematicParticle *) 0 ;
  rave::Vector7D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicParticle **)&jarg1; 
  result = (rave::Vector7D *) &((rave::KinematicParticle const *)arg1)->fullstate();
  *(rave::Vector7D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKParticle_1p4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::KinematicParticle *arg1 = (rave::KinematicParticle *) 0 ;
  rave::Vector4D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicParticle **)&jarg1; 
  result = (rave::Vector4D *) &((rave::KinematicParticle const *)arg1)->p4();
  *(rave::Vector4D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKParticle_1fullerror(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::KinematicParticle *arg1 = (rave::KinematicParticle *) 0 ;
  rave::Covariance7D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicParticle **)&jarg1; 
  result = (rave::Covariance7D *) &((rave::KinematicParticle const *)arg1)->fullerror();
  *(rave::Covariance7D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKParticle_1state(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::KinematicParticle *arg1 = (rave::KinematicParticle *) 0 ;
  rave::Vector6D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicParticle **)&jarg1; 
  result = (rave::Vector6D *) &((rave::KinematicParticle const *)arg1)->state();
  *(rave::Vector6D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKParticle_1error(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::KinematicParticle *arg1 = (rave::KinematicParticle *) 0 ;
  rave::Covariance6D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicParticle **)&jarg1; 
  result = (rave::Covariance6D *) &((rave::KinematicParticle const *)arg1)->error();
  *(rave::Covariance6D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_at_hephy_Rave_raveJNI_RaveKParticle_1charge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  rave::KinematicParticle *arg1 = (rave::KinematicParticle *) 0 ;
  rave::Charge result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicParticle **)&jarg1; 
  result = (rave::Charge)((rave::KinematicParticle const *)arg1)->charge();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKParticle_1perigeeParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::KinematicParticle *arg1 = (rave::KinematicParticle *) 0 ;
  rave::PerigeeParameters5D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicParticle **)&jarg1; 
  result = (rave::PerigeeParameters5D *) &((rave::KinematicParticle const *)arg1)->perigeeParameters();
  *(rave::PerigeeParameters5D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKParticle_1perigeeCovariance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::KinematicParticle *arg1 = (rave::KinematicParticle *) 0 ;
  rave::PerigeeCovariance5D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicParticle **)&jarg1; 
  result = (rave::PerigeeCovariance5D *) &((rave::KinematicParticle const *)arg1)->perigeeCovariance();
  *(rave::PerigeeCovariance5D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKParticle_1fullPerigeeParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::KinematicParticle *arg1 = (rave::KinematicParticle *) 0 ;
  rave::PerigeeParameters6D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicParticle **)&jarg1; 
  result = (rave::PerigeeParameters6D *) &((rave::KinematicParticle const *)arg1)->fullPerigeeParameters();
  *(rave::PerigeeParameters6D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKParticle_1fullPerigeeCovariance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::KinematicParticle *arg1 = (rave::KinematicParticle *) 0 ;
  rave::PerigeeCovariance6D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicParticle **)&jarg1; 
  result = (rave::PerigeeCovariance6D *) &((rave::KinematicParticle const *)arg1)->fullPerigeeCovariance();
  *(rave::PerigeeCovariance6D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveKParticle_1chi2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::KinematicParticle *arg1 = (rave::KinematicParticle *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicParticle **)&jarg1; 
  result = (float)((rave::KinematicParticle const *)arg1)->chi2();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveKParticle_1ndof(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::KinematicParticle *arg1 = (rave::KinematicParticle *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicParticle **)&jarg1; 
  result = (float)((rave::KinematicParticle const *)arg1)->ndof();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKParticle_1magneticField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::KinematicParticle *arg1 = (rave::KinematicParticle *) 0 ;
  boost::shared_ptr< rave::MagneticField > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicParticle **)&jarg1; 
  result = ((rave::KinematicParticle const *)arg1)->magneticField();
  *(boost::shared_ptr< rave::MagneticField > **)&jresult = new boost::shared_ptr< rave::MagneticField >((const boost::shared_ptr< rave::MagneticField > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKParticle_1lastConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::KinematicParticle *arg1 = (rave::KinematicParticle *) 0 ;
  boost::shared_ptr< rave::KinematicConstraint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicParticle **)&jarg1; 
  result = ((rave::KinematicParticle const *)arg1)->lastConstraint();
  *(boost::shared_ptr< rave::KinematicConstraint > **)&jresult = new boost::shared_ptr< rave::KinematicConstraint >((const boost::shared_ptr< rave::KinematicConstraint > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_at_hephy_Rave_raveJNI_RaveKParticle_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  rave::KinematicParticle *arg1 = (rave::KinematicParticle *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicParticle **)&jarg1; 
  result = (int)((rave::KinematicParticle const *)arg1)->id();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKParticle_1link(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::KinematicParticle *arg1 = (rave::KinematicParticle *) 0 ;
  boost::any result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicParticle **)&jarg1; 
  result = ((rave::KinematicParticle const *)arg1)->link();
  *(boost::any **)&jresult = new boost::any((const boost::any &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_at_hephy_Rave_raveJNI_RaveKParticle_1tag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  rave::KinematicParticle *arg1 = (rave::KinematicParticle *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicParticle **)&jarg1; 
  result = ((rave::KinematicParticle const *)arg1)->tag();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveKParticle_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  rave::KinematicParticle *arg1 = (rave::KinematicParticle *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicParticle **)&jarg1; 
  result = (bool)((rave::KinematicParticle const *)arg1)->isValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveKParticle_1unlink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  rave::KinematicParticle *arg1 = (rave::KinematicParticle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicParticle **)&jarg1; 
  (arg1)->unlink();
}


SWIGEXPORT jstring JNICALL Java_at_hephy_Rave_raveJNI_RaveKParticle_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  rave::KinematicParticle *arg1 = (rave::KinematicParticle *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicParticle **)&jarg1; 
  result = (char *)rave_KinematicParticle_toString(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_at_hephy_Rave_raveJNI_RaveKParticle_1_1_1str_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  rave::KinematicParticle *arg1 = (rave::KinematicParticle *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicParticle **)&jarg1; 
  result = rave_KinematicParticle___str__(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RaveKParticle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::KinematicParticle *arg1 = (rave::KinematicParticle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::KinematicParticle **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKVertex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rave::BasicKinematicVertex *arg1 = 0 ;
  rave::KinematicVertex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::BasicKinematicVertex **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::BasicKinematicVertex const & reference is null");
    return 0;
  } 
  result = (rave::KinematicVertex *)new rave::KinematicVertex((rave::BasicKinematicVertex const &)*arg1);
  *(rave::KinematicVertex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKVertex_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rave::KinematicVertex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rave::KinematicVertex *)new rave::KinematicVertex();
  *(rave::KinematicVertex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKVertex_1position(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::KinematicVertex *arg1 = (rave::KinematicVertex *) 0 ;
  rave::Point3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicVertex **)&jarg1; 
  result = (rave::Point3D *) &((rave::KinematicVertex const *)arg1)->position();
  *(rave::Point3D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKVertex_1error(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::KinematicVertex *arg1 = (rave::KinematicVertex *) 0 ;
  rave::Covariance3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicVertex **)&jarg1; 
  result = (rave::Covariance3D *) &((rave::KinematicVertex const *)arg1)->error();
  *(rave::Covariance3D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKVertex_1correspondingTree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::KinematicVertex *arg1 = (rave::KinematicVertex *) 0 ;
  boost::weak_ptr< rave::BasicKinematicTree > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicVertex **)&jarg1; 
  result = ((rave::KinematicVertex const *)arg1)->correspondingTree();
  *(boost::weak_ptr< rave::BasicKinematicTree > **)&jresult = new boost::weak_ptr< rave::BasicKinematicTree >((const boost::weak_ptr< rave::BasicKinematicTree > &)result); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveKVertex_1ndf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::KinematicVertex *arg1 = (rave::KinematicVertex *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicVertex **)&jarg1; 
  result = (float)((rave::KinematicVertex const *)arg1)->ndf();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveKVertex_1chiSquared(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  rave::KinematicVertex *arg1 = (rave::KinematicVertex *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicVertex **)&jarg1; 
  result = (float)((rave::KinematicVertex const *)arg1)->chiSquared();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_at_hephy_Rave_raveJNI_RaveKVertex_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  rave::KinematicVertex *arg1 = (rave::KinematicVertex *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicVertex **)&jarg1; 
  result = (int)((rave::KinematicVertex const *)arg1)->id();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveKVertex_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  rave::KinematicVertex *arg1 = (rave::KinematicVertex *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicVertex **)&jarg1; 
  result = (bool)((rave::KinematicVertex const *)arg1)->isValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveKVertex_1unlink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  rave::KinematicVertex *arg1 = (rave::KinematicVertex *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicVertex **)&jarg1; 
  (arg1)->unlink();
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RaveKVertex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::KinematicVertex *arg1 = (rave::KinematicVertex *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::KinematicVertex **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKTransientTrackParticle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jlong jarg6, jstring jarg7) {
  jlong jresult = 0 ;
  rave::Track *arg1 = 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  boost::any arg6 ;
  std::string arg7 ;
  float temp2 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  boost::any *argp6 ;
  rave::TransientTrackKinematicParticle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Track **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Track const & reference is null");
    return 0;
  } 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  argp6 = *(boost::any **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null boost::any");
    return 0;
  }
  arg6 = *argp6; 
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0); 
  if (!arg7_pstr) return 0;
  (&arg7)->assign(arg7_pstr);
  jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  result = (rave::TransientTrackKinematicParticle *)new rave::TransientTrackKinematicParticle((rave::Track const &)*arg1,(float const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,arg6,arg7);
  *(rave::TransientTrackKinematicParticle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKTransientTrackParticle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  rave::Track *arg1 = 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  boost::any arg6 ;
  float temp2 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  boost::any *argp6 ;
  rave::TransientTrackKinematicParticle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Track **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Track const & reference is null");
    return 0;
  } 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  argp6 = *(boost::any **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null boost::any");
    return 0;
  }
  arg6 = *argp6; 
  result = (rave::TransientTrackKinematicParticle *)new rave::TransientTrackKinematicParticle((rave::Track const &)*arg1,(float const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,arg6);
  *(rave::TransientTrackKinematicParticle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKTransientTrackParticle_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  rave::Track *arg1 = 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float temp2 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  rave::TransientTrackKinematicParticle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Track **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Track const & reference is null");
    return 0;
  } 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  result = (rave::TransientTrackKinematicParticle *)new rave::TransientTrackKinematicParticle((rave::Track const &)*arg1,(float const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  *(rave::TransientTrackKinematicParticle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKTransientTrackParticle_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jlong jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  rave::Track *arg1 = 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  boost::any arg4 ;
  std::string arg5 ;
  float temp2 ;
  float temp3 ;
  boost::any *argp4 ;
  rave::TransientTrackKinematicParticle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Track **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Track const & reference is null");
    return 0;
  } 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  argp4 = *(boost::any **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null boost::any");
    return 0;
  }
  arg4 = *argp4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  (&arg5)->assign(arg5_pstr);
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (rave::TransientTrackKinematicParticle *)new rave::TransientTrackKinematicParticle((rave::Track const &)*arg1,(float const &)*arg2,(float const &)*arg3,arg4,arg5);
  *(rave::TransientTrackKinematicParticle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKTransientTrackParticle_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  rave::Track *arg1 = 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  boost::any arg4 ;
  float temp2 ;
  float temp3 ;
  boost::any *argp4 ;
  rave::TransientTrackKinematicParticle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Track **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Track const & reference is null");
    return 0;
  } 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  argp4 = *(boost::any **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null boost::any");
    return 0;
  }
  arg4 = *argp4; 
  result = (rave::TransientTrackKinematicParticle *)new rave::TransientTrackKinematicParticle((rave::Track const &)*arg1,(float const &)*arg2,(float const &)*arg3,arg4);
  *(rave::TransientTrackKinematicParticle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKTransientTrackParticle_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  rave::Track *arg1 = 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp2 ;
  float temp3 ;
  rave::TransientTrackKinematicParticle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::Track **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Track const & reference is null");
    return 0;
  } 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  result = (rave::TransientTrackKinematicParticle *)new rave::TransientTrackKinematicParticle((rave::Track const &)*arg1,(float const &)*arg2,(float const &)*arg3);
  *(rave::TransientTrackKinematicParticle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKTransientTrackParticle_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jfloat jarg4, jfloat jarg5, jlong jarg6, jstring jarg7) {
  jlong jresult = 0 ;
  rave::Vector7D *arg1 = 0 ;
  rave::Covariance7D *arg2 = 0 ;
  rave::Charge *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  boost::any arg6 ;
  std::string arg7 ;
  rave::Charge temp3 ;
  float temp4 ;
  float temp5 ;
  boost::any *argp6 ;
  rave::TransientTrackKinematicParticle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Vector7D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector7D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Covariance7D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Covariance7D const & reference is null");
    return 0;
  } 
  temp3 = (rave::Charge)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  argp6 = *(boost::any **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null boost::any");
    return 0;
  }
  arg6 = *argp6; 
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0); 
  if (!arg7_pstr) return 0;
  (&arg7)->assign(arg7_pstr);
  jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  result = (rave::TransientTrackKinematicParticle *)new rave::TransientTrackKinematicParticle((rave::Vector7D const &)*arg1,(rave::Covariance7D const &)*arg2,(rave::Charge const &)*arg3,(float const &)*arg4,(float const &)*arg5,arg6,arg7);
  *(rave::TransientTrackKinematicParticle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKTransientTrackParticle_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jfloat jarg4, jfloat jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  rave::Vector7D *arg1 = 0 ;
  rave::Covariance7D *arg2 = 0 ;
  rave::Charge *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  boost::any arg6 ;
  rave::Charge temp3 ;
  float temp4 ;
  float temp5 ;
  boost::any *argp6 ;
  rave::TransientTrackKinematicParticle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Vector7D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector7D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Covariance7D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Covariance7D const & reference is null");
    return 0;
  } 
  temp3 = (rave::Charge)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  argp6 = *(boost::any **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null boost::any");
    return 0;
  }
  arg6 = *argp6; 
  result = (rave::TransientTrackKinematicParticle *)new rave::TransientTrackKinematicParticle((rave::Vector7D const &)*arg1,(rave::Covariance7D const &)*arg2,(rave::Charge const &)*arg3,(float const &)*arg4,(float const &)*arg5,arg6);
  *(rave::TransientTrackKinematicParticle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKTransientTrackParticle_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  rave::Vector7D *arg1 = 0 ;
  rave::Covariance7D *arg2 = 0 ;
  rave::Charge *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  rave::Charge temp3 ;
  float temp4 ;
  float temp5 ;
  rave::TransientTrackKinematicParticle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Vector7D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector7D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Covariance7D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Covariance7D const & reference is null");
    return 0;
  } 
  temp3 = (rave::Charge)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  result = (rave::TransientTrackKinematicParticle *)new rave::TransientTrackKinematicParticle((rave::Vector7D const &)*arg1,(rave::Covariance7D const &)*arg2,(rave::Charge const &)*arg3,(float const &)*arg4,(float const &)*arg5);
  *(rave::TransientTrackKinematicParticle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKTransientTrackParticle_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jstring jarg8) {
  jlong jresult = 0 ;
  rave::Vector7D *arg1 = 0 ;
  rave::PerigeeCovariance6D *arg2 = 0 ;
  rave::Charge *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  rave::Point3D *arg6 = 0 ;
  boost::any arg7 ;
  std::string arg8 ;
  rave::Charge temp3 ;
  double temp4 ;
  double temp5 ;
  boost::any *argp7 ;
  rave::TransientTrackKinematicParticle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg6_;
  arg1 = *(rave::Vector7D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector7D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::PerigeeCovariance6D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::PerigeeCovariance6D const & reference is null");
    return 0;
  } 
  temp3 = (rave::Charge)jarg3; 
  arg3 = &temp3; 
  temp4 = (double)jarg4; 
  arg4 = &temp4; 
  temp5 = (double)jarg5; 
  arg5 = &temp5; 
  arg6 = *(rave::Point3D **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return 0;
  } 
  argp7 = *(boost::any **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null boost::any");
    return 0;
  }
  arg7 = *argp7; 
  if(!jarg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg8_pstr = (const char *)jenv->GetStringUTFChars(jarg8, 0); 
  if (!arg8_pstr) return 0;
  (&arg8)->assign(arg8_pstr);
  jenv->ReleaseStringUTFChars(jarg8, arg8_pstr); 
  result = (rave::TransientTrackKinematicParticle *)new rave::TransientTrackKinematicParticle((rave::Vector7D const &)*arg1,(rave::PerigeeCovariance6D const &)*arg2,(rave::Charge const &)*arg3,(double const &)*arg4,(double const &)*arg5,(rave::Point3D const &)*arg6,arg7,arg8);
  *(rave::TransientTrackKinematicParticle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKTransientTrackParticle_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_, jlong jarg7) {
  jlong jresult = 0 ;
  rave::Vector7D *arg1 = 0 ;
  rave::PerigeeCovariance6D *arg2 = 0 ;
  rave::Charge *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  rave::Point3D *arg6 = 0 ;
  boost::any arg7 ;
  rave::Charge temp3 ;
  double temp4 ;
  double temp5 ;
  boost::any *argp7 ;
  rave::TransientTrackKinematicParticle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg6_;
  arg1 = *(rave::Vector7D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector7D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::PerigeeCovariance6D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::PerigeeCovariance6D const & reference is null");
    return 0;
  } 
  temp3 = (rave::Charge)jarg3; 
  arg3 = &temp3; 
  temp4 = (double)jarg4; 
  arg4 = &temp4; 
  temp5 = (double)jarg5; 
  arg5 = &temp5; 
  arg6 = *(rave::Point3D **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return 0;
  } 
  argp7 = *(boost::any **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null boost::any");
    return 0;
  }
  arg7 = *argp7; 
  result = (rave::TransientTrackKinematicParticle *)new rave::TransientTrackKinematicParticle((rave::Vector7D const &)*arg1,(rave::PerigeeCovariance6D const &)*arg2,(rave::Charge const &)*arg3,(double const &)*arg4,(double const &)*arg5,(rave::Point3D const &)*arg6,arg7);
  *(rave::TransientTrackKinematicParticle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKTransientTrackParticle_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  rave::Vector7D *arg1 = 0 ;
  rave::PerigeeCovariance6D *arg2 = 0 ;
  rave::Charge *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  rave::Point3D *arg6 = 0 ;
  rave::Charge temp3 ;
  double temp4 ;
  double temp5 ;
  rave::TransientTrackKinematicParticle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg6_;
  arg1 = *(rave::Vector7D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector7D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::PerigeeCovariance6D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::PerigeeCovariance6D const & reference is null");
    return 0;
  } 
  temp3 = (rave::Charge)jarg3; 
  arg3 = &temp3; 
  temp4 = (double)jarg4; 
  arg4 = &temp4; 
  temp5 = (double)jarg5; 
  arg5 = &temp5; 
  arg6 = *(rave::Point3D **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return 0;
  } 
  result = (rave::TransientTrackKinematicParticle *)new rave::TransientTrackKinematicParticle((rave::Vector7D const &)*arg1,(rave::PerigeeCovariance6D const &)*arg2,(rave::Charge const &)*arg3,(double const &)*arg4,(double const &)*arg5,(rave::Point3D const &)*arg6);
  *(rave::TransientTrackKinematicParticle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKTransientTrackParticle_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  rave::Vector7D *arg1 = 0 ;
  rave::PerigeeCovariance6D *arg2 = 0 ;
  rave::Charge *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  rave::Charge temp3 ;
  double temp4 ;
  double temp5 ;
  rave::TransientTrackKinematicParticle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::Vector7D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector7D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::PerigeeCovariance6D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::PerigeeCovariance6D const & reference is null");
    return 0;
  } 
  temp3 = (rave::Charge)jarg3; 
  arg3 = &temp3; 
  temp4 = (double)jarg4; 
  arg4 = &temp4; 
  temp5 = (double)jarg5; 
  arg5 = &temp5; 
  result = (rave::TransientTrackKinematicParticle *)new rave::TransientTrackKinematicParticle((rave::Vector7D const &)*arg1,(rave::PerigeeCovariance6D const &)*arg2,(rave::Charge const &)*arg3,(double const &)*arg4,(double const &)*arg5);
  *(rave::TransientTrackKinematicParticle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKTransientTrackParticle_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jstring jarg8) {
  jlong jresult = 0 ;
  rave::PerigeeParameters6D *arg1 = 0 ;
  rave::PerigeeCovariance6D *arg2 = 0 ;
  rave::Charge *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  rave::Point3D *arg6 = 0 ;
  boost::any arg7 ;
  std::string arg8 ;
  rave::Charge temp3 ;
  double temp4 ;
  double temp5 ;
  boost::any *argp7 ;
  rave::TransientTrackKinematicParticle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg6_;
  arg1 = *(rave::PerigeeParameters6D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::PerigeeParameters6D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::PerigeeCovariance6D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::PerigeeCovariance6D const & reference is null");
    return 0;
  } 
  temp3 = (rave::Charge)jarg3; 
  arg3 = &temp3; 
  temp4 = (double)jarg4; 
  arg4 = &temp4; 
  temp5 = (double)jarg5; 
  arg5 = &temp5; 
  arg6 = *(rave::Point3D **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return 0;
  } 
  argp7 = *(boost::any **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null boost::any");
    return 0;
  }
  arg7 = *argp7; 
  if(!jarg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg8_pstr = (const char *)jenv->GetStringUTFChars(jarg8, 0); 
  if (!arg8_pstr) return 0;
  (&arg8)->assign(arg8_pstr);
  jenv->ReleaseStringUTFChars(jarg8, arg8_pstr); 
  result = (rave::TransientTrackKinematicParticle *)new rave::TransientTrackKinematicParticle((rave::PerigeeParameters6D const &)*arg1,(rave::PerigeeCovariance6D const &)*arg2,(rave::Charge const &)*arg3,(double const &)*arg4,(double const &)*arg5,(rave::Point3D const &)*arg6,arg7,arg8);
  *(rave::TransientTrackKinematicParticle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKTransientTrackParticle_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_, jlong jarg7) {
  jlong jresult = 0 ;
  rave::PerigeeParameters6D *arg1 = 0 ;
  rave::PerigeeCovariance6D *arg2 = 0 ;
  rave::Charge *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  rave::Point3D *arg6 = 0 ;
  boost::any arg7 ;
  rave::Charge temp3 ;
  double temp4 ;
  double temp5 ;
  boost::any *argp7 ;
  rave::TransientTrackKinematicParticle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg6_;
  arg1 = *(rave::PerigeeParameters6D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::PerigeeParameters6D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::PerigeeCovariance6D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::PerigeeCovariance6D const & reference is null");
    return 0;
  } 
  temp3 = (rave::Charge)jarg3; 
  arg3 = &temp3; 
  temp4 = (double)jarg4; 
  arg4 = &temp4; 
  temp5 = (double)jarg5; 
  arg5 = &temp5; 
  arg6 = *(rave::Point3D **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return 0;
  } 
  argp7 = *(boost::any **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null boost::any");
    return 0;
  }
  arg7 = *argp7; 
  result = (rave::TransientTrackKinematicParticle *)new rave::TransientTrackKinematicParticle((rave::PerigeeParameters6D const &)*arg1,(rave::PerigeeCovariance6D const &)*arg2,(rave::Charge const &)*arg3,(double const &)*arg4,(double const &)*arg5,(rave::Point3D const &)*arg6,arg7);
  *(rave::TransientTrackKinematicParticle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKTransientTrackParticle_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  rave::PerigeeParameters6D *arg1 = 0 ;
  rave::PerigeeCovariance6D *arg2 = 0 ;
  rave::Charge *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  rave::Point3D *arg6 = 0 ;
  rave::Charge temp3 ;
  double temp4 ;
  double temp5 ;
  rave::TransientTrackKinematicParticle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg6_;
  arg1 = *(rave::PerigeeParameters6D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::PerigeeParameters6D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::PerigeeCovariance6D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::PerigeeCovariance6D const & reference is null");
    return 0;
  } 
  temp3 = (rave::Charge)jarg3; 
  arg3 = &temp3; 
  temp4 = (double)jarg4; 
  arg4 = &temp4; 
  temp5 = (double)jarg5; 
  arg5 = &temp5; 
  arg6 = *(rave::Point3D **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Point3D const & reference is null");
    return 0;
  } 
  result = (rave::TransientTrackKinematicParticle *)new rave::TransientTrackKinematicParticle((rave::PerigeeParameters6D const &)*arg1,(rave::PerigeeCovariance6D const &)*arg2,(rave::Charge const &)*arg3,(double const &)*arg4,(double const &)*arg5,(rave::Point3D const &)*arg6);
  *(rave::TransientTrackKinematicParticle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKTransientTrackParticle_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  rave::PerigeeParameters6D *arg1 = 0 ;
  rave::PerigeeCovariance6D *arg2 = 0 ;
  rave::Charge *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  rave::Charge temp3 ;
  double temp4 ;
  double temp5 ;
  rave::TransientTrackKinematicParticle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::PerigeeParameters6D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::PerigeeParameters6D const & reference is null");
    return 0;
  } 
  arg2 = *(rave::PerigeeCovariance6D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::PerigeeCovariance6D const & reference is null");
    return 0;
  } 
  temp3 = (rave::Charge)jarg3; 
  arg3 = &temp3; 
  temp4 = (double)jarg4; 
  arg4 = &temp4; 
  temp5 = (double)jarg5; 
  arg5 = &temp5; 
  result = (rave::TransientTrackKinematicParticle *)new rave::TransientTrackKinematicParticle((rave::PerigeeParameters6D const &)*arg1,(rave::PerigeeCovariance6D const &)*arg2,(rave::Charge const &)*arg3,(double const &)*arg4,(double const &)*arg5);
  *(rave::TransientTrackKinematicParticle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKTransientTrackParticle_1_1SWIG_117(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rave::TransientTrackKinematicParticle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rave::TransientTrackKinematicParticle *)new rave::TransientTrackKinematicParticle();
  *(rave::TransientTrackKinematicParticle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKTransientTrackParticle_1closestToTransversePoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  rave::TransientTrackKinematicParticle *arg1 = (rave::TransientTrackKinematicParticle *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp2 ;
  double temp3 ;
  rave::TransientTrackKinematicParticle result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::TransientTrackKinematicParticle **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  result = ((rave::TransientTrackKinematicParticle const *)arg1)->closestToTransversePoint((double const &)*arg2,(double const &)*arg3);
  *(rave::TransientTrackKinematicParticle **)&jresult = new rave::TransientTrackKinematicParticle((const rave::TransientTrackKinematicParticle &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKTransientTrackParticle_1closestToTransversePoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  rave::TransientTrackKinematicParticle *arg1 = (rave::TransientTrackKinematicParticle *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  rave::TransientTrackKinematicParticle result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::TransientTrackKinematicParticle **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = ((rave::TransientTrackKinematicParticle const *)arg1)->closestToTransversePoint((double const &)*arg2);
  *(rave::TransientTrackKinematicParticle **)&jresult = new rave::TransientTrackKinematicParticle((const rave::TransientTrackKinematicParticle &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKTransientTrackParticle_1closestToTransversePoint_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::TransientTrackKinematicParticle *arg1 = (rave::TransientTrackKinematicParticle *) 0 ;
  rave::TransientTrackKinematicParticle result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::TransientTrackKinematicParticle **)&jarg1; 
  result = ((rave::TransientTrackKinematicParticle const *)arg1)->closestToTransversePoint();
  *(rave::TransientTrackKinematicParticle **)&jresult = new rave::TransientTrackKinematicParticle((const rave::TransientTrackKinematicParticle &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RaveKTransientTrackParticle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::TransientTrackKinematicParticle *arg1 = (rave::TransientTrackKinematicParticle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::TransientTrackKinematicParticle **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKVirtualParticle(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rave::VirtualKinematicParticle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rave::VirtualKinematicParticle *)new rave::VirtualKinematicParticle();
  *(rave::VirtualKinematicParticle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RaveKVirtualParticle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::VirtualKinematicParticle *arg1 = (rave::VirtualKinematicParticle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::VirtualKinematicParticle **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKTree_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  rave::BasicKinematicTree *arg1 = 0 ;
  rave::KinematicTree *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::BasicKinematicTree **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::BasicKinematicTree const & reference is null");
    return 0;
  } 
  result = (rave::KinematicTree *)new rave::KinematicTree((rave::BasicKinematicTree const &)*arg1);
  *(rave::KinematicTree **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKTree_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rave::KinematicTree *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rave::KinematicTree *)new rave::KinematicTree();
  *(rave::KinematicTree **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveKTree_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  rave::KinematicTree *arg1 = (rave::KinematicTree *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicTree **)&jarg1; 
  result = (bool)((rave::KinematicTree const *)arg1)->isEmpty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveKTree_1isConsistent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  rave::KinematicTree *arg1 = (rave::KinematicTree *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicTree **)&jarg1; 
  result = (bool)((rave::KinematicTree const *)arg1)->isConsistent();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveKTree_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  rave::KinematicTree *arg1 = (rave::KinematicTree *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicTree **)&jarg1; 
  result = (bool)((rave::KinematicTree const *)arg1)->isValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKTree_1finalStateParticles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::KinematicTree *arg1 = (rave::KinematicTree *) 0 ;
  std::vector< rave::KinematicParticle > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicTree **)&jarg1; 
  result = ((rave::KinematicTree const *)arg1)->finalStateParticles();
  *(std::vector< rave::KinematicParticle > **)&jresult = new std::vector< rave::KinematicParticle >((const std::vector< rave::KinematicParticle > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKTree_1topParticle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::KinematicTree *arg1 = (rave::KinematicTree *) 0 ;
  rave::KinematicParticle result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicTree **)&jarg1; 
  result = ((rave::KinematicTree const *)arg1)->topParticle();
  *(rave::KinematicParticle **)&jresult = new rave::KinematicParticle((const rave::KinematicParticle &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKTree_1currentDecayVertex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::KinematicTree *arg1 = (rave::KinematicTree *) 0 ;
  rave::KinematicVertex result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicTree **)&jarg1; 
  result = ((rave::KinematicTree const *)arg1)->currentDecayVertex();
  *(rave::KinematicVertex **)&jresult = new rave::KinematicVertex((const rave::KinematicVertex &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKTree_1currentProductionVertex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::KinematicTree *arg1 = (rave::KinematicTree *) 0 ;
  rave::KinematicVertex result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicTree **)&jarg1; 
  result = ((rave::KinematicTree const *)arg1)->currentProductionVertex();
  *(rave::KinematicVertex **)&jresult = new rave::KinematicVertex((const rave::KinematicVertex &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKTree_1currentParticle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::KinematicTree *arg1 = (rave::KinematicTree *) 0 ;
  rave::KinematicParticle result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicTree **)&jarg1; 
  result = ((rave::KinematicTree const *)arg1)->currentParticle();
  *(rave::KinematicParticle **)&jresult = new rave::KinematicParticle((const rave::KinematicParticle &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKTree_1motherParticle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::KinematicTree *arg1 = (rave::KinematicTree *) 0 ;
  SwigValueWrapper< std::pair< bool,rave::KinematicParticle > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicTree **)&jarg1; 
  result = ((rave::KinematicTree const *)arg1)->motherParticle();
  *(std::pair< bool,rave::KinematicParticle > **)&jresult = new std::pair< bool,rave::KinematicParticle >((const std::pair< bool,rave::KinematicParticle > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKTree_1daughterParticles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::KinematicTree *arg1 = (rave::KinematicTree *) 0 ;
  std::vector< rave::KinematicParticle > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicTree **)&jarg1; 
  result = ((rave::KinematicTree const *)arg1)->daughterParticles();
  *(std::vector< rave::KinematicParticle > **)&jresult = new std::vector< rave::KinematicParticle >((const std::vector< rave::KinematicParticle > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveKTree_1movePointerToTheTop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  rave::KinematicTree *arg1 = (rave::KinematicTree *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicTree **)&jarg1; 
  ((rave::KinematicTree const *)arg1)->movePointerToTheTop();
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveKTree_1movePointerToTheMother(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  rave::KinematicTree *arg1 = (rave::KinematicTree *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicTree **)&jarg1; 
  result = (bool)((rave::KinematicTree const *)arg1)->movePointerToTheMother();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveKTree_1movePointerToTheFirstChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  rave::KinematicTree *arg1 = (rave::KinematicTree *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicTree **)&jarg1; 
  result = (bool)((rave::KinematicTree const *)arg1)->movePointerToTheFirstChild();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveKTree_1movePointerToTheNextChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  rave::KinematicTree *arg1 = (rave::KinematicTree *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicTree **)&jarg1; 
  result = (bool)((rave::KinematicTree const *)arg1)->movePointerToTheNextChild();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveKTree_1findParticle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  rave::KinematicTree *arg1 = (rave::KinematicTree *) 0 ;
  rave::KinematicParticle arg2 ;
  rave::KinematicParticle *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::KinematicTree **)&jarg1; 
  argp2 = *(rave::KinematicParticle **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null rave::KinematicParticle");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((rave::KinematicTree const *)arg1)->findParticle(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveKTree_1findDecayVertex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  rave::KinematicTree *arg1 = (rave::KinematicTree *) 0 ;
  rave::KinematicVertex arg2 ;
  rave::KinematicVertex *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::KinematicTree **)&jarg1; 
  argp2 = *(rave::KinematicVertex **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null rave::KinematicVertex");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((rave::KinematicTree const *)arg1)->findDecayVertex(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveKTree_1unlink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  rave::KinematicTree *arg1 = (rave::KinematicTree *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicTree **)&jarg1; 
  (arg1)->unlink();
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RaveKTree(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::KinematicTree *arg1 = (rave::KinematicTree *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::KinematicTree **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKTreeFactory_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  rave::MagneticField *arg1 = 0 ;
  rave::Propagator *arg2 = 0 ;
  int arg3 ;
  rave::KinematicTreeFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::MagneticField **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::MagneticField const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Propagator **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Propagator const & reference is null");
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (rave::KinematicTreeFactory *)new rave::KinematicTreeFactory((rave::MagneticField const &)*arg1,(rave::Propagator const &)*arg2,arg3);
  *(rave::KinematicTreeFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKTreeFactory_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  rave::MagneticField *arg1 = 0 ;
  rave::Propagator *arg2 = 0 ;
  rave::KinematicTreeFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::MagneticField **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::MagneticField const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Propagator **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Propagator const & reference is null");
    return 0;
  } 
  result = (rave::KinematicTreeFactory *)new rave::KinematicTreeFactory((rave::MagneticField const &)*arg1,(rave::Propagator const &)*arg2);
  *(rave::KinematicTreeFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKTreeFactory_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::MagneticField *arg1 = 0 ;
  rave::KinematicTreeFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::MagneticField **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::MagneticField const & reference is null");
    return 0;
  } 
  result = (rave::KinematicTreeFactory *)new rave::KinematicTreeFactory((rave::MagneticField const &)*arg1);
  *(rave::KinematicTreeFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKTreeFactory_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  rave::KinematicTreeFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (rave::KinematicTreeFactory *)new rave::KinematicTreeFactory();
  *(rave::KinematicTreeFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKTreeFactory_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  rave::MagneticField *arg1 = 0 ;
  rave::Propagator *arg2 = 0 ;
  rave::Ellipsoid3D *arg3 = 0 ;
  int arg4 ;
  rave::KinematicTreeFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::MagneticField **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::MagneticField const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Propagator **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Propagator const & reference is null");
    return 0;
  } 
  arg3 = *(rave::Ellipsoid3D **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Ellipsoid3D const & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  result = (rave::KinematicTreeFactory *)new rave::KinematicTreeFactory((rave::MagneticField const &)*arg1,(rave::Propagator const &)*arg2,(rave::Ellipsoid3D const &)*arg3,arg4);
  *(rave::KinematicTreeFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveKTreeFactory_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  rave::MagneticField *arg1 = 0 ;
  rave::Propagator *arg2 = 0 ;
  rave::Ellipsoid3D *arg3 = 0 ;
  rave::KinematicTreeFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::MagneticField **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::MagneticField const & reference is null");
    return 0;
  } 
  arg2 = *(rave::Propagator **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Propagator const & reference is null");
    return 0;
  } 
  arg3 = *(rave::Ellipsoid3D **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Ellipsoid3D const & reference is null");
    return 0;
  } 
  result = (rave::KinematicTreeFactory *)new rave::KinematicTreeFactory((rave::MagneticField const &)*arg1,(rave::Propagator const &)*arg2,(rave::Ellipsoid3D const &)*arg3);
  *(rave::KinematicTreeFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RaveKTreeFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::KinematicTreeFactory *arg1 = (rave::KinematicTreeFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::KinematicTreeFactory **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKTreeFactory_1useVertexFitter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  rave::KinematicTreeFactory *arg1 = (rave::KinematicTreeFactory *) 0 ;
  std::vector< rave::KinematicParticle > arg2 ;
  std::string arg3 ;
  bool arg4 ;
  std::vector< rave::KinematicParticle > *argp2 ;
  rave::KinematicTree result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::KinematicTreeFactory **)&jarg1; 
  argp2 = *(std::vector< rave::KinematicParticle > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< rave::KinematicParticle >");
    return 0;
  }
  arg2 = *argp2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  result = ((rave::KinematicTreeFactory const *)arg1)->useVertexFitter(arg2,arg3,arg4);
  *(rave::KinematicTree **)&jresult = new rave::KinematicTree((const rave::KinematicTree &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKTreeFactory_1useVertexFitter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  rave::KinematicTreeFactory *arg1 = (rave::KinematicTreeFactory *) 0 ;
  std::vector< rave::KinematicParticle > arg2 ;
  std::string arg3 ;
  std::vector< rave::KinematicParticle > *argp2 ;
  rave::KinematicTree result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::KinematicTreeFactory **)&jarg1; 
  argp2 = *(std::vector< rave::KinematicParticle > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< rave::KinematicParticle >");
    return 0;
  }
  arg2 = *argp2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((rave::KinematicTreeFactory const *)arg1)->useVertexFitter(arg2,arg3);
  *(rave::KinematicTree **)&jresult = new rave::KinematicTree((const rave::KinematicTree &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKTreeFactory_1useVertexFitter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  rave::KinematicTreeFactory *arg1 = (rave::KinematicTreeFactory *) 0 ;
  std::vector< rave::KinematicParticle > arg2 ;
  std::vector< rave::KinematicParticle > *argp2 ;
  rave::KinematicTree result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(rave::KinematicTreeFactory **)&jarg1; 
  argp2 = *(std::vector< rave::KinematicParticle > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< rave::KinematicParticle >");
    return 0;
  }
  arg2 = *argp2; 
  result = ((rave::KinematicTreeFactory const *)arg1)->useVertexFitter(arg2);
  *(rave::KinematicTree **)&jresult = new rave::KinematicTree((const rave::KinematicTree &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKTreeFactory_1useVertexFitter_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  rave::KinematicTreeFactory *arg1 = (rave::KinematicTreeFactory *) 0 ;
  std::vector< rave::KinematicParticle > arg2 ;
  rave::KinematicConstraint arg3 ;
  std::string arg4 ;
  bool arg5 ;
  std::vector< rave::KinematicParticle > *argp2 ;
  rave::KinematicConstraint *argp3 ;
  rave::KinematicTree result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::KinematicTreeFactory **)&jarg1; 
  argp2 = *(std::vector< rave::KinematicParticle > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< rave::KinematicParticle >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(rave::KinematicConstraint **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null rave::KinematicConstraint");
    return 0;
  }
  arg3 = *argp3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = jarg5 ? true : false; 
  result = ((rave::KinematicTreeFactory const *)arg1)->useVertexFitter(arg2,arg3,arg4,arg5);
  *(rave::KinematicTree **)&jresult = new rave::KinematicTree((const rave::KinematicTree &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKTreeFactory_1useVertexFitter_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jlong jresult = 0 ;
  rave::KinematicTreeFactory *arg1 = (rave::KinematicTreeFactory *) 0 ;
  std::vector< rave::KinematicParticle > arg2 ;
  rave::KinematicConstraint arg3 ;
  std::string arg4 ;
  std::vector< rave::KinematicParticle > *argp2 ;
  rave::KinematicConstraint *argp3 ;
  rave::KinematicTree result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::KinematicTreeFactory **)&jarg1; 
  argp2 = *(std::vector< rave::KinematicParticle > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< rave::KinematicParticle >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(rave::KinematicConstraint **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null rave::KinematicConstraint");
    return 0;
  }
  arg3 = *argp3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = ((rave::KinematicTreeFactory const *)arg1)->useVertexFitter(arg2,arg3,arg4);
  *(rave::KinematicTree **)&jresult = new rave::KinematicTree((const rave::KinematicTree &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKTreeFactory_1useVertexFitter_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  rave::KinematicTreeFactory *arg1 = (rave::KinematicTreeFactory *) 0 ;
  std::vector< rave::KinematicParticle > arg2 ;
  rave::KinematicConstraint arg3 ;
  std::vector< rave::KinematicParticle > *argp2 ;
  rave::KinematicConstraint *argp3 ;
  rave::KinematicTree result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::KinematicTreeFactory **)&jarg1; 
  argp2 = *(std::vector< rave::KinematicParticle > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< rave::KinematicParticle >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(rave::KinematicConstraint **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null rave::KinematicConstraint");
    return 0;
  }
  arg3 = *argp3; 
  result = ((rave::KinematicTreeFactory const *)arg1)->useVertexFitter(arg2,arg3);
  *(rave::KinematicTree **)&jresult = new rave::KinematicTree((const rave::KinematicTree &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKTreeFactory_1useParticleFitterWithTree_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  rave::KinematicTreeFactory *arg1 = (rave::KinematicTreeFactory *) 0 ;
  std::vector< rave::KinematicTree > arg2 ;
  rave::KinematicConstraint arg3 ;
  std::string arg4 ;
  bool arg5 ;
  std::vector< rave::KinematicTree > *argp2 ;
  rave::KinematicConstraint *argp3 ;
  std::vector< rave::KinematicTree > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::KinematicTreeFactory **)&jarg1; 
  argp2 = *(std::vector< rave::KinematicTree > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< rave::KinematicTree >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(rave::KinematicConstraint **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null rave::KinematicConstraint");
    return 0;
  }
  arg3 = *argp3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = jarg5 ? true : false; 
  result = ((rave::KinematicTreeFactory const *)arg1)->useParticleFitter(arg2,arg3,arg4,arg5);
  *(std::vector< rave::KinematicTree > **)&jresult = new std::vector< rave::KinematicTree >((const std::vector< rave::KinematicTree > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKTreeFactory_1useParticleFitterWithTree_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jlong jresult = 0 ;
  rave::KinematicTreeFactory *arg1 = (rave::KinematicTreeFactory *) 0 ;
  std::vector< rave::KinematicTree > arg2 ;
  rave::KinematicConstraint arg3 ;
  std::string arg4 ;
  std::vector< rave::KinematicTree > *argp2 ;
  rave::KinematicConstraint *argp3 ;
  std::vector< rave::KinematicTree > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::KinematicTreeFactory **)&jarg1; 
  argp2 = *(std::vector< rave::KinematicTree > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< rave::KinematicTree >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(rave::KinematicConstraint **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null rave::KinematicConstraint");
    return 0;
  }
  arg3 = *argp3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = ((rave::KinematicTreeFactory const *)arg1)->useParticleFitter(arg2,arg3,arg4);
  *(std::vector< rave::KinematicTree > **)&jresult = new std::vector< rave::KinematicTree >((const std::vector< rave::KinematicTree > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKTreeFactory_1useParticleFitterWithTree_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  rave::KinematicTreeFactory *arg1 = (rave::KinematicTreeFactory *) 0 ;
  std::vector< rave::KinematicTree > arg2 ;
  rave::KinematicConstraint arg3 ;
  std::vector< rave::KinematicTree > *argp2 ;
  rave::KinematicConstraint *argp3 ;
  std::vector< rave::KinematicTree > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::KinematicTreeFactory **)&jarg1; 
  argp2 = *(std::vector< rave::KinematicTree > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< rave::KinematicTree >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(rave::KinematicConstraint **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null rave::KinematicConstraint");
    return 0;
  }
  arg3 = *argp3; 
  result = ((rave::KinematicTreeFactory const *)arg1)->useParticleFitter(arg2,arg3);
  *(std::vector< rave::KinematicTree > **)&jresult = new std::vector< rave::KinematicTree >((const std::vector< rave::KinematicTree > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKTreeFactory_1useParticleFitterWithParticle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  rave::KinematicTreeFactory *arg1 = (rave::KinematicTreeFactory *) 0 ;
  std::vector< rave::KinematicParticle > arg2 ;
  rave::KinematicConstraint arg3 ;
  std::string arg4 ;
  bool arg5 ;
  std::vector< rave::KinematicParticle > *argp2 ;
  rave::KinematicConstraint *argp3 ;
  std::vector< rave::KinematicParticle > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::KinematicTreeFactory **)&jarg1; 
  argp2 = *(std::vector< rave::KinematicParticle > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< rave::KinematicParticle >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(rave::KinematicConstraint **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null rave::KinematicConstraint");
    return 0;
  }
  arg3 = *argp3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = jarg5 ? true : false; 
  result = ((rave::KinematicTreeFactory const *)arg1)->useParticleFitter(arg2,arg3,arg4,arg5);
  *(std::vector< rave::KinematicParticle > **)&jresult = new std::vector< rave::KinematicParticle >((const std::vector< rave::KinematicParticle > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKTreeFactory_1useParticleFitterWithParticle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jlong jresult = 0 ;
  rave::KinematicTreeFactory *arg1 = (rave::KinematicTreeFactory *) 0 ;
  std::vector< rave::KinematicParticle > arg2 ;
  rave::KinematicConstraint arg3 ;
  std::string arg4 ;
  std::vector< rave::KinematicParticle > *argp2 ;
  rave::KinematicConstraint *argp3 ;
  std::vector< rave::KinematicParticle > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::KinematicTreeFactory **)&jarg1; 
  argp2 = *(std::vector< rave::KinematicParticle > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< rave::KinematicParticle >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(rave::KinematicConstraint **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null rave::KinematicConstraint");
    return 0;
  }
  arg3 = *argp3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = ((rave::KinematicTreeFactory const *)arg1)->useParticleFitter(arg2,arg3,arg4);
  *(std::vector< rave::KinematicParticle > **)&jresult = new std::vector< rave::KinematicParticle >((const std::vector< rave::KinematicParticle > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKTreeFactory_1useParticleFitterWithParticle_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  rave::KinematicTreeFactory *arg1 = (rave::KinematicTreeFactory *) 0 ;
  std::vector< rave::KinematicParticle > arg2 ;
  rave::KinematicConstraint arg3 ;
  std::vector< rave::KinematicParticle > *argp2 ;
  rave::KinematicConstraint *argp3 ;
  std::vector< rave::KinematicParticle > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(rave::KinematicTreeFactory **)&jarg1; 
  argp2 = *(std::vector< rave::KinematicParticle > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< rave::KinematicParticle >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(rave::KinematicConstraint **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null rave::KinematicConstraint");
    return 0;
  }
  arg3 = *argp3; 
  result = ((rave::KinematicTreeFactory const *)arg1)->useParticleFitter(arg2,arg3);
  *(std::vector< rave::KinematicParticle > **)&jresult = new std::vector< rave::KinematicParticle >((const std::vector< rave::KinematicParticle > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKTreeFactory_1getPropagator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::KinematicTreeFactory *arg1 = (rave::KinematicTreeFactory *) 0 ;
  rave::Propagator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicTreeFactory **)&jarg1; 
  result = (rave::Propagator *) &((rave::KinematicTreeFactory const *)arg1)->getPropagator();
  *(rave::Propagator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKTreeFactory_1getMagneticField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::KinematicTreeFactory *arg1 = (rave::KinematicTreeFactory *) 0 ;
  rave::MagneticField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicTreeFactory **)&jarg1; 
  result = (rave::MagneticField *) &((rave::KinematicTreeFactory const *)arg1)->getMagneticField();
  *(rave::MagneticField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKTreeFactory_1getBeamspot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::KinematicTreeFactory *arg1 = (rave::KinematicTreeFactory *) 0 ;
  rave::Ellipsoid3D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicTreeFactory **)&jarg1; 
  result = (rave::Ellipsoid3D *) &((rave::KinematicTreeFactory const *)arg1)->getBeamspot();
  *(rave::Ellipsoid3D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveKTreeFactory_1hasBeamspot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  rave::KinematicTreeFactory *arg1 = (rave::KinematicTreeFactory *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicTreeFactory **)&jarg1; 
  result = (bool)((rave::KinematicTreeFactory const *)arg1)->hasBeamspot();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_at_hephy_Rave_raveJNI_RaveKTreeFactory_1verbosity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  rave::KinematicTreeFactory *arg1 = (rave::KinematicTreeFactory *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::KinematicTreeFactory **)&jarg1; 
  result = (int)((rave::KinematicTreeFactory const *)arg1)->verbosity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveFlavorTagFactory_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  rave::MagneticField *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  rave::FlavorTagFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::MagneticField **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::MagneticField const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (rave::FlavorTagFactory *)new rave::FlavorTagFactory((rave::MagneticField const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  *(rave::FlavorTagFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveFlavorTagFactory_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  rave::MagneticField *arg1 = 0 ;
  std::string *arg2 = 0 ;
  rave::FlavorTagFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::MagneticField **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::MagneticField const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (rave::FlavorTagFactory *)new rave::FlavorTagFactory((rave::MagneticField const &)*arg1,(std::string const &)*arg2);
  *(rave::FlavorTagFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveFlavorTagFactory_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::MagneticField *arg1 = 0 ;
  rave::FlavorTagFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::MagneticField **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::MagneticField const & reference is null");
    return 0;
  } 
  result = (rave::FlavorTagFactory *)new rave::FlavorTagFactory((rave::MagneticField const &)*arg1);
  *(rave::FlavorTagFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveFlavorTagFactory_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  rave::VertexFactory *arg1 = 0 ;
  std::string *arg2 = 0 ;
  rave::FlavorTagFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::VertexFactory **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::VertexFactory const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (rave::FlavorTagFactory *)new rave::FlavorTagFactory((rave::VertexFactory const &)*arg1,(std::string const &)*arg2);
  *(rave::FlavorTagFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_new_1RaveFlavorTagFactory_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  rave::VertexFactory *arg1 = 0 ;
  rave::FlavorTagFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::VertexFactory **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::VertexFactory const & reference is null");
    return 0;
  } 
  result = (rave::FlavorTagFactory *)new rave::FlavorTagFactory((rave::VertexFactory const &)*arg1);
  *(rave::FlavorTagFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_delete_1RaveFlavorTagFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  rave::FlavorTagFactory *arg1 = (rave::FlavorTagFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(rave::FlavorTagFactory **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jfloat JNICALL Java_at_hephy_Rave_raveJNI_RaveFlavorTagFactory_1tag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jfloat jresult = 0 ;
  rave::FlavorTagFactory *arg1 = (rave::FlavorTagFactory *) 0 ;
  std::vector< rave::Track > *arg2 = 0 ;
  rave::Vertex *arg3 = 0 ;
  rave::Vector3D *arg4 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(rave::FlavorTagFactory **)&jarg1; 
  arg2 = *(std::vector< rave::Track > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< rave::Track > const & reference is null");
    return 0;
  } 
  arg3 = *(rave::Vertex **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vertex const & reference is null");
    return 0;
  } 
  arg4 = *(rave::Vector3D **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rave::Vector3D const & reference is null");
    return 0;
  } 
  result = (float)((rave::FlavorTagFactory const *)arg1)->tag((std::vector< rave::Track > const &)*arg2,(rave::Vertex const &)*arg3,(rave::Vector3D const &)*arg4);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_at_hephy_Rave_raveJNI_RaveFlavorTagFactory_1hasFlavorTagging(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  rave::FlavorTagFactory *arg1 = (rave::FlavorTagFactory *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::FlavorTagFactory **)&jarg1; 
  result = (bool)((rave::FlavorTagFactory const *)arg1)->hasFlavorTagging();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_RaveFlavorTagFactory_1resetBeamSpot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  rave::FlavorTagFactory *arg1 = (rave::FlavorTagFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(rave::FlavorTagFactory **)&jarg1; 
  (arg1)->resetBeamSpot();
}


SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeParameters5D_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(rave::PerigeeParameters3D **)&baseptr = *(rave::PerigeeParameters5D **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeCovariance5D_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(rave::PerigeeCovariance3D **)&baseptr = *(rave::PerigeeCovariance5D **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveConstantMagneticField_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(rave::MagneticField **)&baseptr = *(rave::ConstantMagneticField **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVacuumPropagator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(rave::Propagator **)&baseptr = *(rave::VacuumPropagator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVector4D_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(rave::Point3D **)&baseptr = *(rave::Vector4D **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveVector7D_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(rave::Vector6D **)&baseptr = *(rave::Vector7D **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance4D_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(rave::Covariance3D **)&baseptr = *(rave::Covariance4D **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveCovariance7D_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(rave::Covariance6D **)&baseptr = *(rave::Covariance7D **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeParameters6D_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(rave::PerigeeParameters5D **)&baseptr = *(rave::PerigeeParameters6D **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RavePerigeeCovariance6D_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(rave::PerigeeCovariance5D **)&baseptr = *(rave::PerigeeCovariance6D **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKMultipleConstraint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(rave::KinematicConstraint **)&baseptr = *(rave::MultipleKinematicConstraint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKTransientTrackParticle_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(rave::KinematicParticle **)&baseptr = *(rave::TransientTrackKinematicParticle **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_at_hephy_Rave_raveJNI_RaveKVirtualParticle_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(rave::KinematicParticle **)&baseptr = *(rave::VirtualKinematicParticle **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_at_hephy_Rave_raveJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[8] = {
    {
      "SwigDirector_RavePropagator_copy", "(Lat/hephy/Rave/RavePropagator;)J" 
    },
    {
      "SwigDirector_RavePropagator_closestTo", "(Lat/hephy/Rave/RavePropagator;JJZ)J" 
    },
    {
      "SwigDirector_RavePropagator_to__SWIG_0", "(Lat/hephy/Rave/RavePropagator;JJ)J" 
    },
    {
      "SwigDirector_RavePropagator_to__SWIG_1", "(Lat/hephy/Rave/RavePropagator;JJ)J" 
    },
    {
      "SwigDirector_RaveVacuumPropagator_copy", "(Lat/hephy/Rave/RaveVacuumPropagator;)J" 
    },
    {
      "SwigDirector_RaveVacuumPropagator_closestTo", "(Lat/hephy/Rave/RaveVacuumPropagator;JJZ)J" 
    },
    {
      "SwigDirector_RaveVacuumPropagator_to__SWIG_0", "(Lat/hephy/Rave/RaveVacuumPropagator;JJ)J" 
    },
    {
      "SwigDirector_RaveVacuumPropagator_to__SWIG_1", "(Lat/hephy/Rave/RaveVacuumPropagator;JJ)J" 
    }
  };
  Swig::jclass_raveJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_raveJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_methids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_methids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

